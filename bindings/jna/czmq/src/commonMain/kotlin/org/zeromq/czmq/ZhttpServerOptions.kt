/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class ZhttpServerOptions {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zhttp_server_options_new(): Pointer
        fun zhttp_server_options_from_config(config: Pointer): Pointer
        fun destroy(self: Pointer)
        fun zhttp_server_options_port(self: Pointer): Int
        fun zhttp_server_options_set_port(self: Pointer, port: Int): Unit
        fun zhttp_server_options_backend_address(self: Pointer): String
        fun zhttp_server_options_set_backend_address(self: Pointer, address: String): Unit
        fun zhttp_server_options_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zhttp_server_options_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new zhttp_server_options.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zhttp_server_options_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Create options from config tree.
     */
//    public static ZhttpServerOptions fromConfig (config: Zconfig) {
//        return new ZhttpServerOptions (nativeLib.zhttp_server_options_from_config (config.self))
//    }
//
    /**
     * Destroy the zhttp_server_options.
     */
//    @Override
//    public void close () {
//        nativeLib.zhttp_server_options_destroy(self)
//        self = 0
//    }
//
    /**
     * Get the server listening port.
     */
    fun port(): Int {
        return nativeLib.zhttp_server_options_port(self)
    }

    /**
     * Set the server listening port
     */
    fun setPort(port: Int): Unit {
        nativeLib.zhttp_server_options_set_port(self, port)
    }

    /**
     * Get the address sockets should connect to in order to receive requests.
     */
    fun backendAddress(): String {
        return nativeLib.zhttp_server_options_backend_address(self)
    }

    /**
     * Set the address sockets should connect to in order to receive requests.
     */
    fun setBackendAddress(address: String): Unit {
        nativeLib.zhttp_server_options_set_backend_address(self, address)
    }

}
