/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zlistx {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zlistx_new(): Pointer
        fun zlistx_unpack(frame: Pointer): Pointer
        fun destroy(self: Pointer)
        fun zlistx_add_start(self: Pointer, item: Pointer): Pointer
        fun zlistx_add_end(self: Pointer, item: Pointer): Pointer
        fun zlistx_size(self: Pointer): Pointer
        fun zlistx_head(self: Pointer): Pointer
        fun zlistx_tail(self: Pointer): Pointer
        fun zlistx_first(self: Pointer): Pointer
        fun zlistx_next(self: Pointer): Pointer
        fun zlistx_prev(self: Pointer): Pointer
        fun zlistx_last(self: Pointer): Pointer
        fun zlistx_item(self: Pointer): Pointer
        fun zlistx_cursor(self: Pointer): Pointer
        fun zlistx_handle_item(handle: Pointer): Pointer
        fun zlistx_find(self: Pointer, item: Pointer): Pointer
        fun zlistx_detach(self: Pointer, handle: Pointer): Pointer
        fun zlistx_detach_cur(self: Pointer): Pointer
        fun zlistx_delete(self: Pointer, handle: Pointer): Int
        fun zlistx_move_start(self: Pointer, handle: Pointer): Unit
        fun zlistx_move_end(self: Pointer, handle: Pointer): Unit
        fun zlistx_purge(self: Pointer): Unit
        fun zlistx_sort(self: Pointer): Unit
        fun zlistx_insert(self: Pointer, item: Pointer, lowValue: Boolean): Pointer
        fun zlistx_reorder(self: Pointer, handle: Pointer, lowValue: Boolean): Unit
        fun zlistx_dup(self: Pointer): Pointer
        fun zlistx_pack(self: Pointer): Pointer
        fun zlistx_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Returns the item associated with the given list handle, or NULL if passed
     * in handle is NULL. Asserts that the passed in handle points to a list element.
     */
    fun handleItem(handle: Pointer): Pointer {
        return nativeLib.zlistx_handle_item(handle)
    }

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zlistx_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new, empty list.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zlistx_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Unpack binary frame into a new list. Packed data must follow format
     * defined by zlistx_pack. List is set to autofree. An empty frame
     * unpacks to an empty list.
     */
//    public static Zlistx unpack (frame: Zframe) {
//        return new Zlistx (nativeLib.zlistx_unpack (frame.self))
//    }
//
    /**
     * Destroy a list. If an item destructor was specified, all items in the
     * list are automatically destroyed as well.
     */
//    @Override
//    public void close () {
//        nativeLib.zlistx_destroy(self)
//        self = 0
//    }
//
    /**
     * Add an item to the head of the list. Calls the item duplicator, if any,
     * on the item. Resets cursor to list head. Returns an item handle on
     * success.
     */
    fun addStart(item: Pointer): Pointer {
        return nativeLib.zlistx_add_start(self, item)
    }

    /**
     * Add an item to the tail of the list. Calls the item duplicator, if any,
     * on the item. Resets cursor to list head. Returns an item handle on
     * success.
     */
    fun addEnd(item: Pointer): Pointer {
        return nativeLib.zlistx_add_end(self, item)
    }

    /**
     * Return the number of items in the list
     */
    fun size(): Pointer {
        return nativeLib.zlistx_size(self)
    }

    /**
     * Return first item in the list, or null, leaves the cursor
     */
    fun head(): Pointer {
        return nativeLib.zlistx_head(self)
    }

    /**
     * Return last item in the list, or null, leaves the cursor
     */
    fun tail(): Pointer {
        return nativeLib.zlistx_tail(self)
    }

    /**
     * Return the item at the head of list. If the list is empty, returns NULL.
     * Leaves cursor pointing at the head item, or NULL if the list is empty.
     */
    fun first(): Pointer {
        return nativeLib.zlistx_first(self)
    }

    /**
     * Return the next item. At the end of the list (or in an empty list),
     * returns NULL. Use repeated zlistx_next () calls to work through the list
     * from zlistx_first (). First time, acts as zlistx_first().
     */
    fun next(): Pointer {
        return nativeLib.zlistx_next(self)
    }

    /**
     * Return the previous item. At the start of the list (or in an empty list),
     * returns NULL. Use repeated zlistx_prev () calls to work through the list
     * backwards from zlistx_last (). First time, acts as zlistx_last().
     */
    fun prev(): Pointer {
        return nativeLib.zlistx_prev(self)
    }

    /**
     * Return the item at the tail of list. If the list is empty, returns NULL.
     * Leaves cursor pointing at the tail item, or NULL if the list is empty.
     */
    fun last(): Pointer {
        return nativeLib.zlistx_last(self)
    }

    /**
     * Returns the value of the item at the cursor, or NULL if the cursor is
     * not pointing to an item.
     */
    fun item(): Pointer {
        return nativeLib.zlistx_item(self)
    }

    /**
     * Returns the handle of the item at the cursor, or NULL if the cursor is
     * not pointing to an item.
     */
    fun cursor(): Pointer {
        return nativeLib.zlistx_cursor(self)
    }

    /**
     * Find an item in the list, searching from the start. Uses the item
     * comparator, if any, else compares item values directly. Returns the
     * item handle found, or NULL. Sets the cursor to the found item, if any.
     */
    fun find(item: Pointer): Pointer {
        return nativeLib.zlistx_find(self, item)
    }

    /**
     * Detach an item from the list, using its handle. The item is not modified,
     * and the caller is responsible for destroying it if necessary. If handle is
     * null, detaches the first item on the list. Returns item that was detached,
     * or null if none was. If cursor was at item, moves cursor to previous item,
     * so you can detach items while iterating forwards through a list.
     */
    fun detach(handle: Pointer): Pointer {
        return nativeLib.zlistx_detach(self, handle)
    }

    /**
     * Detach item at the cursor, if any, from the list. The item is not modified,
     * and the caller is responsible for destroying it as necessary. Returns item
     * that was detached, or null if none was. Moves cursor to previous item, so
     * you can detach items while iterating forwards through a list.
     */
    fun detachCur(): Pointer {
        return nativeLib.zlistx_detach_cur(self)
    }

    /**
     * Delete an item, using its handle. Calls the item destructor if any is
     * set. If handle is null, deletes the first item on the list. Returns 0
     * if an item was deleted, -1 if not. If cursor was at item, moves cursor
     * to previous item, so you can delete items while iterating forwards
     * through a list.
     */
    fun delete(handle: Pointer): Int {
        return nativeLib.zlistx_delete(self, handle)
    }

    /**
     * Move an item to the start of the list, via its handle.
     */
    fun moveStart(handle: Pointer): Unit {
        nativeLib.zlistx_move_start(self, handle)
    }

    /**
     * Move an item to the end of the list, via its handle.
     */
    fun moveEnd(handle: Pointer): Unit {
        nativeLib.zlistx_move_end(self, handle)
    }

    /**
     * Remove all items from the list, and destroy them if the item destructor
     * is set.
     */
    fun purge(): Unit {
        nativeLib.zlistx_purge(self)
    }

    /**
     * Sort the list. If an item comparator was set, calls that to compare
     * items, otherwise compares on item value. The sort is not stable, so may
     * reorder equal items.
     */
    fun sort(): Unit {
        nativeLib.zlistx_sort(self)
    }

    /**
     * Create a new node and insert it into a sorted list. Calls the item
     * duplicator, if any, on the item. If low_value is true, starts searching
     * from the start of the list, otherwise searches from the end. Use the item
     * comparator, if any, to find where to place the new node. Returns a handle
     * to the new node. Resets the cursor to the list head.
     */
    fun insert(item: Pointer, lowValue: Boolean): Pointer {
        return nativeLib.zlistx_insert(self, item, lowValue)
    }

    /**
     * Move an item, specified by handle, into position in a sorted list. Uses
     * the item comparator, if any, to determine the new location. If low_value
     * is true, starts searching from the start of the list, otherwise searches
     * from the end.
     */
    fun reorder(handle: Pointer, lowValue: Boolean): Unit {
        nativeLib.zlistx_reorder(self, handle, lowValue)
    }

    /**
     * Make a copy of the list; items are duplicated if you set a duplicator
     * for the list, otherwise not. Copying a null reference returns a null
     * reference.
     */
    fun dup(): Zlistx {
        return Zlistx (nativeLib.zlistx_dup(self))
    }

    /**
     * Serialize list to a binary frame that can be sent in a message.
     * The packed format is compatible with the 'strings' type implemented by zproto:
     *
     *    ; A list of strings
     *    list            = list-count *longstr
     *    list-count      = number-4
     *
     *    ; Strings are always length + text contents
     *    longstr         = number-4 *VCHAR
     *
     *    ; Numbers are unsigned integers in network byte order
     *    number-4        = 4OCTET
     */
    fun pack(): Zframe {
        return Zframe (nativeLib.zlistx_pack(self))
    }

}
