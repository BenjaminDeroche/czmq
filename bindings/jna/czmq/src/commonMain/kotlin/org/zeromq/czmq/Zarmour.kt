/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zarmour {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zarmour_new(): Pointer
        fun destroy(self: Pointer)
        fun zarmour_encode(self: Pointer, data: ByteArray, size: Pointer): String
        fun zarmour_decode(self: Pointer, data: String): Pointer
        fun zarmour_mode(self: Pointer): Int
        fun zarmour_mode_str(self: Pointer): String
        fun zarmour_set_mode(self: Pointer, mode: Int): Unit
        fun zarmour_pad(self: Pointer): Boolean
        fun zarmour_set_pad(self: Pointer, pad: Boolean): Unit
        fun zarmour_pad_char(self: Pointer): Char
        fun zarmour_set_pad_char(self: Pointer, padChar: Char): Unit
        fun zarmour_line_breaks(self: Pointer): Boolean
        fun zarmour_set_line_breaks(self: Pointer, lineBreaks: Boolean): Unit
        fun zarmour_line_length(self: Pointer): Pointer
        fun zarmour_set_line_length(self: Pointer, lineLength: Pointer): Unit
        fun zarmour_print(self: Pointer): Unit
        fun zarmour_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zarmour_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new zarmour
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zarmour_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy the zarmour
     */
//    @Override
//    public void close () {
//        nativeLib.zarmour_destroy(self)
//        self = 0
//    }
//
    /**
     * Encode a stream of bytes into an armoured string. Returns the armoured
     * string, or NULL if there was insufficient memory available to allocate
     * a new string.
     */
    fun encode(data: ByteArray, size: Pointer): String {
        return nativeLib.zarmour_encode(self, data, size)
    }

    /**
     * Decode an armoured string into a chunk. The decoded output is
     * null-terminated, so it may be treated as a string, if that's what
     * it was prior to encoding.
     */
    fun decode(data: String): Zchunk {
        return Zchunk (nativeLib.zarmour_decode(self, data))
    }

    /**
     * Get the mode property.
     */
    fun mode(): Int {
        return nativeLib.zarmour_mode(self)
    }

    /**
     * Get printable string for mode.
     */
    fun modeStr(): String {
        return nativeLib.zarmour_mode_str(self)
    }

    /**
     * Set the mode property.
     */
    fun setMode(mode: Int): Unit {
        nativeLib.zarmour_set_mode(self, mode)
    }

    /**
     * Return true if padding is turned on.
     */
    fun pad(): Boolean {
        return nativeLib.zarmour_pad(self)
    }

    /**
     * Turn padding on or off. Default is on.
     */
    fun setPad(pad: Boolean): Unit {
        nativeLib.zarmour_set_pad(self, pad)
    }

    /**
     * Get the padding character.
     */
    fun padChar(): Char {
        return nativeLib.zarmour_pad_char(self)
    }

    /**
     * Set the padding character.
     */
    fun setPadChar(padChar: Char): Unit {
        nativeLib.zarmour_set_pad_char(self, padChar)
    }

    /**
     * Return if splitting output into lines is turned on. Default is off.
     */
    fun lineBreaks(): Boolean {
        return nativeLib.zarmour_line_breaks(self)
    }

    /**
     * Turn splitting output into lines on or off.
     */
    fun setLineBreaks(lineBreaks: Boolean): Unit {
        nativeLib.zarmour_set_line_breaks(self, lineBreaks)
    }

    /**
     * Get the line length used for splitting lines.
     */
    fun lineLength(): Pointer {
        return nativeLib.zarmour_line_length(self)
    }

    /**
     * Set the line length used for splitting lines.
     */
    fun setLineLength(lineLength: Pointer): Unit {
        nativeLib.zarmour_set_line_length(self, lineLength)
    }

    /**
     * Print properties of object
     */
    fun print(): Unit {
        nativeLib.zarmour_print(self)
    }

}
