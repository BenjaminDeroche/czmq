/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class ZdirPatch {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zdir_patch_new(path: String, file: Pointer, op: Int, alias: String): Pointer
        fun destroy(self: Pointer)
        fun zdir_patch_dup(self: Pointer): Pointer
        fun zdir_patch_path(self: Pointer): String
        fun zdir_patch_file(self: Pointer): Pointer
        fun zdir_patch_op(self: Pointer): Int
        fun zdir_patch_vpath(self: Pointer): String
        fun zdir_patch_digest_set(self: Pointer): Unit
        fun zdir_patch_digest(self: Pointer): String
        fun zdir_patch_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zdir_patch_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create new patch
     */
    constructor(path: String, file: Zfile, op: Int, alias: String) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zdir_patch_new(path, file.self, op, alias)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy a patch
     */
//    @Override
//    public void close () {
//        nativeLib.zdir_patch_destroy(self)
//        self = 0
//    }
//
    /**
     * Create copy of a patch. If the patch is null, or memory was exhausted,
     * returns null.
     */
    fun dup(): ZdirPatch {
        return ZdirPatch (nativeLib.zdir_patch_dup(self))
    }

    /**
     * Return patch file directory path
     */
    fun path(): String {
        return nativeLib.zdir_patch_path(self)
    }

    /**
     * Return patch file item
     */
    fun file(): Zfile {
        return Zfile (nativeLib.zdir_patch_file(self))
    }

    /**
     * Return operation
     */
    fun op(): Int {
        return nativeLib.zdir_patch_op(self)
    }

    /**
     * Return patch virtual file path
     */
    fun vpath(): String {
        return nativeLib.zdir_patch_vpath(self)
    }

    /**
     * Calculate hash digest for file (create only)
     */
    fun digestSet(): Unit {
        nativeLib.zdir_patch_digest_set(self)
    }

    /**
     * Return hash digest for patch file
     */
    fun digest(): String {
        return nativeLib.zdir_patch_digest(self)
    }

}
