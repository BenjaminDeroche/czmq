/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Ziflist {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun ziflist_new(): Pointer
        fun destroy(self: Pointer)
        fun ziflist_reload(self: Pointer): Unit
        fun ziflist_size(self: Pointer): Pointer
        fun ziflist_first(self: Pointer): String
        fun ziflist_next(self: Pointer): String
        fun ziflist_address(self: Pointer): String
        fun ziflist_broadcast(self: Pointer): String
        fun ziflist_netmask(self: Pointer): String
        fun ziflist_mac(self: Pointer): String
        fun ziflist_print(self: Pointer): Unit
        fun ziflist_new_ipv6(): Pointer
        fun ziflist_reload_ipv6(self: Pointer): Unit
        fun ziflist_is_ipv6(self: Pointer): Boolean
        fun ziflist_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Get a list of network interfaces currently defined on the system
     * Includes IPv6 interfaces
     */
    fun newIpv6(): Ziflist {
        return Ziflist (nativeLib.ziflist_new_ipv6())
    }

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.ziflist_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Get a list of network interfaces currently defined on the system
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.ziflist_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy a ziflist instance
     */
//    @Override
//    public void close () {
//        nativeLib.ziflist_destroy(self)
//        self = 0
//    }
//
    /**
     * Reload network interfaces from system
     */
    fun reload(): Unit {
        nativeLib.ziflist_reload(self)
    }

    /**
     * Return the number of network interfaces on system
     */
    fun size(): Pointer {
        return nativeLib.ziflist_size(self)
    }

    /**
     * Get first network interface, return NULL if there are none
     */
    fun first(): String {
        return nativeLib.ziflist_first(self)
    }

    /**
     * Get next network interface, return NULL if we hit the last one
     */
    fun next(): String {
        return nativeLib.ziflist_next(self)
    }

    /**
     * Return the current interface IP address as a printable string
     */
    fun address(): String {
        return nativeLib.ziflist_address(self)
    }

    /**
     * Return the current interface broadcast address as a printable string
     */
    fun broadcast(): String {
        return nativeLib.ziflist_broadcast(self)
    }

    /**
     * Return the current interface network mask as a printable string
     */
    fun netmask(): String {
        return nativeLib.ziflist_netmask(self)
    }

    /**
     * Return the current interface MAC address as a printable string
     */
    fun mac(): String {
        return nativeLib.ziflist_mac(self)
    }

    /**
     * Return the list of interfaces.
     */
    fun print(): Unit {
        nativeLib.ziflist_print(self)
    }

    /**
     * Reload network interfaces from system, including IPv6
     */
    fun reloadIpv6(): Unit {
        nativeLib.ziflist_reload_ipv6(self)
    }

    /**
     * Return true if the current interface uses IPv6
     */
    fun isIpv6(): Boolean {
        return nativeLib.ziflist_is_ipv6(self)
    }

}
