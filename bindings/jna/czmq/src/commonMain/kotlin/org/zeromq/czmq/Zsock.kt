/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zsock {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zsock_new(type: Int): Pointer
        fun zsock_new_pub(endpoint: String): Pointer
        fun zsock_new_sub(endpoint: String, subscribe: String): Pointer
        fun zsock_new_req(endpoint: String): Pointer
        fun zsock_new_rep(endpoint: String): Pointer
        fun zsock_new_dealer(endpoint: String): Pointer
        fun zsock_new_router(endpoint: String): Pointer
        fun zsock_new_push(endpoint: String): Pointer
        fun zsock_new_pull(endpoint: String): Pointer
        fun zsock_new_xpub(endpoint: String): Pointer
        fun zsock_new_xsub(endpoint: String): Pointer
        fun zsock_new_pair(endpoint: String): Pointer
        fun zsock_new_stream(endpoint: String): Pointer
        fun zsock_new_server(endpoint: String): Pointer
        fun zsock_new_client(endpoint: String): Pointer
        fun zsock_new_radio(endpoint: String): Pointer
        fun zsock_new_dish(endpoint: String): Pointer
        fun zsock_new_gather(endpoint: String): Pointer
        fun zsock_new_scatter(endpoint: String): Pointer
        fun zsock_new_dgram(endpoint: String): Pointer
        fun destroy(self: Pointer)
        fun zsock_bind(self: Pointer, format: Array<out String>): Int
        fun zsock_endpoint(self: Pointer): String
        fun zsock_unbind(self: Pointer, format: Array<out String>): Int
        fun zsock_connect(self: Pointer, format: Array<out String>): Int
        fun zsock_disconnect(self: Pointer, format: Array<out String>): Int
        fun zsock_attach(self: Pointer, endpoints: String, serverish: Boolean): Int
        fun zsock_type_str(self: Pointer): String
        fun zsock_send(self: Pointer, picture: Array<out String>): Int
        fun zsock_recv(self: Pointer, picture: Array<out String>): Int
        fun zsock_bsend(self: Pointer, picture: Array<out String>): Int
        fun zsock_brecv(self: Pointer, picture: Array<out String>): Int
        fun zsock_routing_id(self: Pointer): Int
        fun zsock_set_routing_id(self: Pointer, routingId: Int): Unit
        fun zsock_set_unbounded(self: Pointer): Unit
        fun zsock_signal(self: Pointer, status: Byte): Int
        fun zsock_wait(self: Pointer): Int
        fun zsock_flush(self: Pointer): Unit
        fun zsock_join(self: Pointer, group: String): Int
        fun zsock_leave(self: Pointer, group: String): Int
        fun zsock_is(self: Pointer): Boolean
        fun zsock_resolve(self: Pointer): Pointer
        fun zsock_has_in(self: Pointer): Boolean
        fun zsock_priority(self: Pointer): Int
        fun zsock_set_priority(self: Pointer, priority: Int): Unit
        fun zsock_reconnect_stop(self: Pointer): Int
        fun zsock_set_reconnect_stop(self: Pointer, reconnectStop: Int): Unit
        fun zsock_set_only_first_subscribe(self: Pointer, onlyFirstSubscribe: Int): Unit
        fun zsock_set_hello_msg(self: Pointer, helloMsg: Pointer): Unit
        fun zsock_set_disconnect_msg(self: Pointer, disconnectMsg: Pointer): Unit
        fun zsock_set_wss_trust_system(self: Pointer, wssTrustSystem: Int): Unit
        fun zsock_set_wss_hostname(self: Pointer, wssHostname: String): Unit
        fun zsock_set_wss_trust_pem(self: Pointer, wssTrustPem: String): Unit
        fun zsock_set_wss_cert_pem(self: Pointer, wssCertPem: String): Unit
        fun zsock_set_wss_key_pem(self: Pointer, wssKeyPem: String): Unit
        fun zsock_out_batch_size(self: Pointer): Int
        fun zsock_set_out_batch_size(self: Pointer, outBatchSize: Int): Unit
        fun zsock_in_batch_size(self: Pointer): Int
        fun zsock_set_in_batch_size(self: Pointer, inBatchSize: Int): Unit
        fun zsock_socks_password(self: Pointer): String
        fun zsock_set_socks_password(self: Pointer, socksPassword: String): Unit
        fun zsock_socks_username(self: Pointer): String
        fun zsock_set_socks_username(self: Pointer, socksUsername: String): Unit
        fun zsock_set_xpub_manual_last_value(self: Pointer, xpubManualLastValue: Int): Unit
        fun zsock_router_notify(self: Pointer): Int
        fun zsock_set_router_notify(self: Pointer, routerNotify: Int): Unit
        fun zsock_multicast_loop(self: Pointer): Int
        fun zsock_set_multicast_loop(self: Pointer, multicastLoop: Int): Unit
        fun zsock_metadata(self: Pointer): String
        fun zsock_set_metadata(self: Pointer, metadata: String): Unit
        fun zsock_loopback_fastpath(self: Pointer): Int
        fun zsock_set_loopback_fastpath(self: Pointer, loopbackFastpath: Int): Unit
        fun zsock_zap_enforce_domain(self: Pointer): Int
        fun zsock_set_zap_enforce_domain(self: Pointer, zapEnforceDomain: Int): Unit
        fun zsock_gssapi_principal_nametype(self: Pointer): Int
        fun zsock_set_gssapi_principal_nametype(self: Pointer, gssapiPrincipalNametype: Int): Unit
        fun zsock_gssapi_service_principal_nametype(self: Pointer): Int
        fun zsock_set_gssapi_service_principal_nametype(self: Pointer, gssapiServicePrincipalNametype: Int): Unit
        fun zsock_bindtodevice(self: Pointer): String
        fun zsock_set_bindtodevice(self: Pointer, bindtodevice: String): Unit
        fun zsock_heartbeat_ivl(self: Pointer): Int
        fun zsock_set_heartbeat_ivl(self: Pointer, heartbeatIvl: Int): Unit
        fun zsock_heartbeat_ttl(self: Pointer): Int
        fun zsock_set_heartbeat_ttl(self: Pointer, heartbeatTtl: Int): Unit
        fun zsock_heartbeat_timeout(self: Pointer): Int
        fun zsock_set_heartbeat_timeout(self: Pointer, heartbeatTimeout: Int): Unit
        fun zsock_use_fd(self: Pointer): Int
        fun zsock_set_use_fd(self: Pointer, useFd: Int): Unit
        fun zsock_set_xpub_manual(self: Pointer, xpubManual: Int): Unit
        fun zsock_set_xpub_welcome_msg(self: Pointer, xpubWelcomeMsg: String): Unit
        fun zsock_set_stream_notify(self: Pointer, streamNotify: Int): Unit
        fun zsock_invert_matching(self: Pointer): Int
        fun zsock_set_invert_matching(self: Pointer, invertMatching: Int): Unit
        fun zsock_set_xpub_verboser(self: Pointer, xpubVerboser: Int): Unit
        fun zsock_connect_timeout(self: Pointer): Int
        fun zsock_set_connect_timeout(self: Pointer, connectTimeout: Int): Unit
        fun zsock_tcp_maxrt(self: Pointer): Int
        fun zsock_set_tcp_maxrt(self: Pointer, tcpMaxrt: Int): Unit
        fun zsock_thread_safe(self: Pointer): Int
        fun zsock_multicast_maxtpdu(self: Pointer): Int
        fun zsock_set_multicast_maxtpdu(self: Pointer, multicastMaxtpdu: Int): Unit
        fun zsock_vmci_buffer_size(self: Pointer): Int
        fun zsock_set_vmci_buffer_size(self: Pointer, vmciBufferSize: Int): Unit
        fun zsock_vmci_buffer_min_size(self: Pointer): Int
        fun zsock_set_vmci_buffer_min_size(self: Pointer, vmciBufferMinSize: Int): Unit
        fun zsock_vmci_buffer_max_size(self: Pointer): Int
        fun zsock_set_vmci_buffer_max_size(self: Pointer, vmciBufferMaxSize: Int): Unit
        fun zsock_vmci_connect_timeout(self: Pointer): Int
        fun zsock_set_vmci_connect_timeout(self: Pointer, vmciConnectTimeout: Int): Unit
        fun zsock_tos(self: Pointer): Int
        fun zsock_set_tos(self: Pointer, tos: Int): Unit
        fun zsock_set_router_handover(self: Pointer, routerHandover: Int): Unit
        fun zsock_set_connect_rid(self: Pointer, connectRid: String): Unit
        fun zsock_set_connect_rid_bin(self: Pointer, connectRid: ByteArray): Unit
        fun zsock_handshake_ivl(self: Pointer): Int
        fun zsock_set_handshake_ivl(self: Pointer, handshakeIvl: Int): Unit
        fun zsock_socks_proxy(self: Pointer): String
        fun zsock_set_socks_proxy(self: Pointer, socksProxy: String): Unit
        fun zsock_set_xpub_nodrop(self: Pointer, xpubNodrop: Int): Unit
        fun zsock_set_router_mandatory(self: Pointer, routerMandatory: Int): Unit
        fun zsock_set_probe_router(self: Pointer, probeRouter: Int): Unit
        fun zsock_set_req_relaxed(self: Pointer, reqRelaxed: Int): Unit
        fun zsock_set_req_correlate(self: Pointer, reqCorrelate: Int): Unit
        fun zsock_set_conflate(self: Pointer, conflate: Int): Unit
        fun zsock_zap_domain(self: Pointer): String
        fun zsock_set_zap_domain(self: Pointer, zapDomain: String): Unit
        fun zsock_mechanism(self: Pointer): Int
        fun zsock_plain_server(self: Pointer): Int
        fun zsock_set_plain_server(self: Pointer, plainServer: Int): Unit
        fun zsock_plain_username(self: Pointer): String
        fun zsock_set_plain_username(self: Pointer, plainUsername: String): Unit
        fun zsock_plain_password(self: Pointer): String
        fun zsock_set_plain_password(self: Pointer, plainPassword: String): Unit
        fun zsock_curve_server(self: Pointer): Int
        fun zsock_set_curve_server(self: Pointer, curveServer: Int): Unit
        fun zsock_curve_publickey(self: Pointer): String
        fun zsock_set_curve_publickey(self: Pointer, curvePublickey: String): Unit
        fun zsock_set_curve_publickey_bin(self: Pointer, curvePublickey: ByteArray): Unit
        fun zsock_curve_secretkey(self: Pointer): String
        fun zsock_set_curve_secretkey(self: Pointer, curveSecretkey: String): Unit
        fun zsock_set_curve_secretkey_bin(self: Pointer, curveSecretkey: ByteArray): Unit
        fun zsock_curve_serverkey(self: Pointer): String
        fun zsock_set_curve_serverkey(self: Pointer, curveServerkey: String): Unit
        fun zsock_set_curve_serverkey_bin(self: Pointer, curveServerkey: ByteArray): Unit
        fun zsock_gssapi_server(self: Pointer): Int
        fun zsock_set_gssapi_server(self: Pointer, gssapiServer: Int): Unit
        fun zsock_gssapi_plaintext(self: Pointer): Int
        fun zsock_set_gssapi_plaintext(self: Pointer, gssapiPlaintext: Int): Unit
        fun zsock_gssapi_principal(self: Pointer): String
        fun zsock_set_gssapi_principal(self: Pointer, gssapiPrincipal: String): Unit
        fun zsock_gssapi_service_principal(self: Pointer): String
        fun zsock_set_gssapi_service_principal(self: Pointer, gssapiServicePrincipal: String): Unit
        fun zsock_ipv6(self: Pointer): Int
        fun zsock_set_ipv6(self: Pointer, ipv6: Int): Unit
        fun zsock_immediate(self: Pointer): Int
        fun zsock_set_immediate(self: Pointer, immediate: Int): Unit
        fun zsock_sndhwm(self: Pointer): Int
        fun zsock_set_sndhwm(self: Pointer, sndhwm: Int): Unit
        fun zsock_rcvhwm(self: Pointer): Int
        fun zsock_set_rcvhwm(self: Pointer, rcvhwm: Int): Unit
        fun zsock_maxmsgsize(self: Pointer): Int
        fun zsock_set_maxmsgsize(self: Pointer, maxmsgsize: Int): Unit
        fun zsock_multicast_hops(self: Pointer): Int
        fun zsock_set_multicast_hops(self: Pointer, multicastHops: Int): Unit
        fun zsock_set_xpub_verbose(self: Pointer, xpubVerbose: Int): Unit
        fun zsock_tcp_keepalive(self: Pointer): Int
        fun zsock_set_tcp_keepalive(self: Pointer, tcpKeepalive: Int): Unit
        fun zsock_tcp_keepalive_idle(self: Pointer): Int
        fun zsock_set_tcp_keepalive_idle(self: Pointer, tcpKeepaliveIdle: Int): Unit
        fun zsock_tcp_keepalive_cnt(self: Pointer): Int
        fun zsock_set_tcp_keepalive_cnt(self: Pointer, tcpKeepaliveCnt: Int): Unit
        fun zsock_tcp_keepalive_intvl(self: Pointer): Int
        fun zsock_set_tcp_keepalive_intvl(self: Pointer, tcpKeepaliveIntvl: Int): Unit
        fun zsock_tcp_accept_filter(self: Pointer): String
        fun zsock_set_tcp_accept_filter(self: Pointer, tcpAcceptFilter: String): Unit
        fun zsock_last_endpoint(self: Pointer): String
        fun zsock_set_router_raw(self: Pointer, routerRaw: Int): Unit
        fun zsock_ipv4only(self: Pointer): Int
        fun zsock_set_ipv4only(self: Pointer, ipv4only: Int): Unit
        fun zsock_set_delay_attach_on_connect(self: Pointer, delayAttachOnConnect: Int): Unit
        fun zsock_hwm(self: Pointer): Int
        fun zsock_set_hwm(self: Pointer, hwm: Int): Unit
        fun zsock_swap(self: Pointer): Int
        fun zsock_set_swap(self: Pointer, swap: Int): Unit
        fun zsock_affinity(self: Pointer): Int
        fun zsock_set_affinity(self: Pointer, affinity: Int): Unit
        fun zsock_identity(self: Pointer): String
        fun zsock_set_identity(self: Pointer, identity: String): Unit
        fun zsock_rate(self: Pointer): Int
        fun zsock_set_rate(self: Pointer, rate: Int): Unit
        fun zsock_recovery_ivl(self: Pointer): Int
        fun zsock_set_recovery_ivl(self: Pointer, recoveryIvl: Int): Unit
        fun zsock_recovery_ivl_msec(self: Pointer): Int
        fun zsock_set_recovery_ivl_msec(self: Pointer, recoveryIvlMsec: Int): Unit
        fun zsock_mcast_loop(self: Pointer): Int
        fun zsock_set_mcast_loop(self: Pointer, mcastLoop: Int): Unit
        fun zsock_rcvtimeo(self: Pointer): Int
        fun zsock_set_rcvtimeo(self: Pointer, rcvtimeo: Int): Unit
        fun zsock_sndtimeo(self: Pointer): Int
        fun zsock_set_sndtimeo(self: Pointer, sndtimeo: Int): Unit
        fun zsock_sndbuf(self: Pointer): Int
        fun zsock_set_sndbuf(self: Pointer, sndbuf: Int): Unit
        fun zsock_rcvbuf(self: Pointer): Int
        fun zsock_set_rcvbuf(self: Pointer, rcvbuf: Int): Unit
        fun zsock_linger(self: Pointer): Int
        fun zsock_set_linger(self: Pointer, linger: Int): Unit
        fun zsock_reconnect_ivl(self: Pointer): Int
        fun zsock_set_reconnect_ivl(self: Pointer, reconnectIvl: Int): Unit
        fun zsock_reconnect_ivl_max(self: Pointer): Int
        fun zsock_set_reconnect_ivl_max(self: Pointer, reconnectIvlMax: Int): Unit
        fun zsock_backlog(self: Pointer): Int
        fun zsock_set_backlog(self: Pointer, backlog: Int): Unit
        fun zsock_set_subscribe(self: Pointer, subscribe: String): Unit
        fun zsock_set_unsubscribe(self: Pointer, unsubscribe: String): Unit
        fun zsock_type(self: Pointer): Int
        fun zsock_rcvmore(self: Pointer): Int
        fun zsock_events(self: Pointer): Int
        fun zsock_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Probe the supplied object, and report if it looks like a zsock_t.
     * Takes a polymorphic socket reference.
     */
    fun `is`(self: Pointer): Boolean {
        return nativeLib.zsock_is(self)
    }

    /**
     * Probe the supplied reference. If it looks like a zsock_t instance, return
     * the underlying libzmq socket handle; else if it looks like a file
     * descriptor, return NULL; else if it looks like a libzmq socket handle,
     * return the supplied value. Takes a polymorphic socket reference.
     */
    fun resolve(self: Pointer): Pointer {
        return nativeLib.zsock_resolve(self)
    }

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zsock_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new socket. Returns the new socket, or NULL if the new socket
     * could not be created. Note that the symbol zsock_new (and other
     * constructors/destructors for zsock) are redirected to the *_checked
     * variant, enabling intelligent socket leak detection. This can have
     * performance implications if you use a LOT of sockets. To turn off this
     * redirection behaviour, define ZSOCK_NOCHECK.
     */
    constructor(type: Int) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zsock_new(type)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Create a PUB socket. Default action is bind.
     */
//    public static Zsock newPub (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_pub (endpoint))
//    }
//
    /**
     * Create a SUB socket, and optionally subscribe to some prefix string. Default
     * action is connect.
     */
//    public static Zsock newSub (endpoint: String, subscribe: String) {
//        return new Zsock (nativeLib.zsock_new_sub (endpoint, subscribe))
//    }
//
    /**
     * Create a REQ socket. Default action is connect.
     */
//    public static Zsock newReq (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_req (endpoint))
//    }
//
    /**
     * Create a REP socket. Default action is bind.
     */
//    public static Zsock newRep (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_rep (endpoint))
//    }
//
    /**
     * Create a DEALER socket. Default action is connect.
     */
//    public static Zsock newDealer (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_dealer (endpoint))
//    }
//
    /**
     * Create a ROUTER socket. Default action is bind.
     */
//    public static Zsock newRouter (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_router (endpoint))
//    }
//
    /**
     * Create a PUSH socket. Default action is connect.
     */
//    public static Zsock newPush (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_push (endpoint))
//    }
//
    /**
     * Create a PULL socket. Default action is bind.
     */
//    public static Zsock newPull (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_pull (endpoint))
//    }
//
    /**
     * Create an XPUB socket. Default action is bind.
     */
//    public static Zsock newXpub (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_xpub (endpoint))
//    }
//
    /**
     * Create an XSUB socket. Default action is connect.
     */
//    public static Zsock newXsub (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_xsub (endpoint))
//    }
//
    /**
     * Create a PAIR socket. Default action is connect.
     */
//    public static Zsock newPair (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_pair (endpoint))
//    }
//
    /**
     * Create a STREAM socket. Default action is connect.
     */
//    public static Zsock newStream (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_stream (endpoint))
//    }
//
    /**
     * Create a SERVER socket. Default action is bind.
     */
//    public static Zsock newServer (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_server (endpoint))
//    }
//
    /**
     * Create a CLIENT socket. Default action is connect.
     */
//    public static Zsock newClient (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_client (endpoint))
//    }
//
    /**
     * Create a RADIO socket. Default action is bind.
     */
//    public static Zsock newRadio (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_radio (endpoint))
//    }
//
    /**
     * Create a DISH socket. Default action is connect.
     */
//    public static Zsock newDish (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_dish (endpoint))
//    }
//
    /**
     * Create a GATHER socket. Default action is bind.
     */
//    public static Zsock newGather (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_gather (endpoint))
//    }
//
    /**
     * Create a SCATTER socket. Default action is connect.
     */
//    public static Zsock newScatter (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_scatter (endpoint))
//    }
//
    /**
     * Create a DGRAM (UDP) socket. Default action is bind.
     * The endpoint is a string consisting of a
     * 'transport'`://` followed by an 'address'. As this is
     * a UDP socket the 'transport' has to be 'udp'. The
     * 'address' specifies the ip address and port to
     * bind to. For example:  udp://127.0.0.1:1234
     * Note: To send to an endpoint over UDP you have to
     * send a message with the destination endpoint address
     * as a first message!
     */
//    public static Zsock newDgram (endpoint: String) {
//        return new Zsock (nativeLib.zsock_new_dgram (endpoint))
//    }
//
    /**
     * Destroy the socket. You must use this for any socket created via the
     * zsock_new method.
     */
//    @Override
//    public void close () {
//        nativeLib.zsock_destroy(self)
//        self = 0
//    }
//
    /**
     * Bind a socket to a formatted endpoint. For tcp:// endpoints, supports
     * ephemeral ports, if you specify the port number as "*". By default
     * zsock uses the IANA designated range from C000 (49152) to FFFF (65535).
     * To override this range, follow the "*" with "[first-last]". Either or
     * both first and last may be empty. To bind to a random port within the
     * range, use "!" in place of "*".
     *
     * Examples:
     *     tcp://127.0.0.1:*           bind to first free port from C000 up
     *     tcp://127.0.0.1:!           bind to random port from C000 to FFFF
     *     tcp://127.0.0.1:*[60000-]   bind to first free port from 60000 up
     *     tcp://127.0.0.1:![-60000]   bind to random port from C000 to 60000
     *     tcp://127.0.0.1:![55000-55999]
     *                                 bind to random port from 55000 to 55999
     *
     * On success, returns the actual port number used, for tcp:// endpoints,
     * and 0 for other transports. On failure, returns -1. Note that when using
     * ephemeral ports, a port may be reused by different services without
     * clients being aware. Protocols that run on ephemeral ports should take
     * this into account.
     */
    fun bind(vararg format: String): Int {
        return nativeLib.zsock_bind(self, format)
    }

    /**
     * Returns last bound endpoint, if any.
     */
    fun endpoint(): String {
        return nativeLib.zsock_endpoint(self)
    }

    /**
     * Unbind a socket from a formatted endpoint.
     * Returns 0 if OK, -1 if the endpoint was invalid or the function
     * isn't supported.
     */
    fun unbind(vararg format: String): Int {
        return nativeLib.zsock_unbind(self, format)
    }

    /**
     * Connect a socket to a formatted endpoint
     * Returns 0 if OK, -1 if the endpoint was invalid.
     */
    fun connect(vararg format: String): Int {
        return nativeLib.zsock_connect(self, format)
    }

    /**
     * Disconnect a socket from a formatted endpoint
     * Returns 0 if OK, -1 if the endpoint was invalid or the function
     * isn't supported.
     */
    fun disconnect(vararg format: String): Int {
        return nativeLib.zsock_disconnect(self, format)
    }

    /**
     * Attach a socket to zero or more endpoints. If endpoints is not null,
     * parses as list of ZeroMQ endpoints, separated by commas, and prefixed by
     * '@' (to bind the socket) or '>' (to connect the socket). Returns 0 if all
     * endpoints were valid, or -1 if there was a syntax error. If the endpoint
     * does not start with '@' or '>', the serverish argument defines whether
     * it is used to bind (serverish = true) or connect (serverish = false).
     */
    fun attach(endpoints: String, serverish: Boolean): Int {
        return nativeLib.zsock_attach(self, endpoints, serverish)
    }

    /**
     * Returns socket type as printable constant string.
     */
    fun typeStr(): String {
        return nativeLib.zsock_type_str(self)
    }

    /**
     * Send a 'picture' message to the socket (or actor). The picture is a
     * string that defines the type of each frame. This makes it easy to send
     * a complex multiframe message in one call. The picture can contain any
     * of these characters, each corresponding to one or two arguments:
     *
     *     i = int (signed)
     *     1 = uint8_t
     *     2 = uint16_t
     *     4 = uint32_t
     *     8 = uint64_t
     *     s = char *
     *     b = byte *, size_t (2 arguments)
     *     c = zchunk_t *
     *     f = zframe_t *
     *     h = zhashx_t *
     *     l = zlistx_t * (DRAFT)
     *     U = zuuid_t *
     *     p = void * (sends the pointer value, only meaningful over inproc)
     *     m = zmsg_t * (sends all frames in the zmsg)
     *     z = sends zero-sized frame (0 arguments)
     *     u = uint (deprecated)
     *
     * Note that s, b, c, and f are encoded the same way and the choice is
     * offered as a convenience to the sender, which may or may not already
     * have data in a zchunk or zframe. Does not change or take ownership of
     * any arguments. Returns 0 if successful, -1 if sending failed for any
     * reason.
     */
    fun send(vararg picture: String): Int {
        return nativeLib.zsock_send(self, picture)
    }

    /**
     * Receive a 'picture' message to the socket (or actor). See zsock_send for
     * the format and meaning of the picture. Returns the picture elements into
     * a series of pointers as provided by the caller:
     *
     *     i = int * (stores signed integer)
     *     4 = uint32_t * (stores 32-bit unsigned integer)
     *     8 = uint64_t * (stores 64-bit unsigned integer)
     *     s = char ** (allocates new string)
     *     b = byte **, size_t * (2 arguments) (allocates memory)
     *     c = zchunk_t ** (creates zchunk)
     *     f = zframe_t ** (creates zframe)
     *     U = zuuid_t * (creates a zuuid with the data)
     *     h = zhashx_t ** (creates zhashx)
     *     l = zlistx_t ** (creates zlistx) (DRAFT)
     *     p = void ** (stores pointer)
     *     m = zmsg_t ** (creates a zmsg with the remaining frames)
     *     z = null, asserts empty frame (0 arguments)
     *     u = uint * (stores unsigned integer, deprecated)
     *
     * Note that zsock_recv creates the returned objects, and the caller must
     * destroy them when finished with them. The supplied pointers do not need
     * to be initialized. Returns 0 if successful, or -1 if it failed to recv
     * a message, in which case the pointers are not modified. When message
     * frames are truncated (a short message), sets return values to zero/null.
     * If an argument pointer is NULL, does not store any value (skips it).
     * An 'n' picture matches an empty frame; if the message does not match,
     * the method will return -1.
     */
    fun recv(vararg picture: String): Int {
        return nativeLib.zsock_recv(self, picture)
    }

    /**
     * Send a binary encoded 'picture' message to the socket (or actor). This
     * method is similar to zsock_send, except the arguments are encoded in a
     * binary format that is compatible with zproto, and is designed to reduce
     * memory allocations. The pattern argument is a string that defines the
     * type of each argument. Supports these argument types:
     *
     *  pattern    C type                  zproto type:
     *     1       uint8_t                 type = "number" size = "1"
     *     2       uint16_t                type = "number" size = "2"
     *     4       uint32_t                type = "number" size = "3"
     *     8       uint64_t                type = "number" size = "4"
     *     s       char *, 0-255 chars     type = "string"
     *     S       char *, 0-2^32-1 chars  type = "longstr"
     *     c       zchunk_t *              type = "chunk"
     *     f       zframe_t *              type = "frame"
     *     u       zuuid_t *               type = "uuid"
     *     m       zmsg_t *                type = "msg"
     *     p       void *, sends pointer value, only over inproc
     *
     * Does not change or take ownership of any arguments. Returns 0 if
     * successful, -1 if sending failed for any reason.
     */
    fun bsend(vararg picture: String): Int {
        return nativeLib.zsock_bsend(self, picture)
    }

    /**
     * Receive a binary encoded 'picture' message from the socket (or actor).
     * This method is similar to zsock_recv, except the arguments are encoded
     * in a binary format that is compatible with zproto, and is designed to
     * reduce memory allocations. The pattern argument is a string that defines
     * the type of each argument. See zsock_bsend for the supported argument
     * types. All arguments must be pointers; this call sets them to point to
     * values held on a per-socket basis.
     * For types 1, 2, 4 and 8 the caller must allocate the memory itself before
     * calling zsock_brecv.
     * For types S, the caller must free the value once finished with it, as
     * zsock_brecv will allocate the buffer.
     * For type s, the caller must not free the value as it is stored in a
     * local cache for performance purposes.
     * For types c, f, u and m the caller must call the appropriate destructor
     * depending on the object as zsock_brecv will create new objects.
     * For type p the caller must coordinate with the sender, as it is just a
     * pointer value being passed.
     */
    fun brecv(vararg picture: String): Int {
        return nativeLib.zsock_brecv(self, picture)
    }

    /**
     * Return socket routing ID if any. This returns 0 if the socket is not
     * of type ZMQ_SERVER or if no request was already received on it.
     */
    fun routingId(): Int {
        return nativeLib.zsock_routing_id(self)
    }

    /**
     * Set routing ID on socket. The socket MUST be of type ZMQ_SERVER.
     * This will be used when sending messages on the socket via the zsock API.
     */
    fun setRoutingId(routingId: Int): Unit {
        nativeLib.zsock_set_routing_id(self, routingId)
    }

    /**
     * Set socket to use unbounded pipes (HWM=0); use this in cases when you are
     * totally certain the message volume can fit in memory. This method works
     * across all versions of ZeroMQ. Takes a polymorphic socket reference.
     */
    fun setUnbounded(): Unit {
        nativeLib.zsock_set_unbounded(self)
    }

    /**
     * Send a signal over a socket. A signal is a short message carrying a
     * success/failure code (by convention, 0 means OK). Signals are encoded
     * to be distinguishable from "normal" messages. Accepts a zsock_t or a
     * zactor_t argument, and returns 0 if successful, -1 if the signal could
     * not be sent. Takes a polymorphic socket reference.
     */
    fun signal(status: Byte): Int {
        return nativeLib.zsock_signal(self, status)
    }

    /**
     * Wait on a signal. Use this to coordinate between threads, over pipe
     * pairs. Blocks until the signal is received. Returns -1 on error, 0 or
     * greater on success. Accepts a zsock_t or a zactor_t as argument.
     * Takes a polymorphic socket reference.
     */
    fun `wait`(): Int {
        return nativeLib.zsock_wait(self)
    }

    /**
     * If there is a partial message still waiting on the socket, remove and
     * discard it. This is useful when reading partial messages, to get specific
     * message types.
     */
    fun flush(): Unit {
        nativeLib.zsock_flush(self)
    }

    /**
     * Join a group for the RADIO-DISH pattern. Call only on ZMQ_DISH.
     * Returns 0 if OK, -1 if failed.
     */
    fun join(group: String): Int {
        return nativeLib.zsock_join(self, group)
    }

    /**
     * Leave a group for the RADIO-DISH pattern. Call only on ZMQ_DISH.
     * Returns 0 if OK, -1 if failed.
     */
    fun leave(group: String): Int {
        return nativeLib.zsock_leave(self, group)
    }

    /**
     * Check whether the socket has available message to read.
     */
    fun hasIn(): Boolean {
        return nativeLib.zsock_has_in(self)
    }

    /**
     * Get socket option `priority`.
     * Available from libzmq 4.3.0.
     */
    fun priority(): Int {
        return nativeLib.zsock_priority(self)
    }

    /**
     * Set socket option `priority`.
     * Available from libzmq 4.3.0.
     */
    fun setPriority(priority: Int): Unit {
        nativeLib.zsock_set_priority(self, priority)
    }

    /**
     * Get socket option `reconnect_stop`.
     * Available from libzmq 4.3.0.
     */
    fun reconnectStop(): Int {
        return nativeLib.zsock_reconnect_stop(self)
    }

    /**
     * Set socket option `reconnect_stop`.
     * Available from libzmq 4.3.0.
     */
    fun setReconnectStop(reconnectStop: Int): Unit {
        nativeLib.zsock_set_reconnect_stop(self, reconnectStop)
    }

    /**
     * Set socket option `only_first_subscribe`.
     * Available from libzmq 4.3.0.
     */
    fun setOnlyFirstSubscribe(onlyFirstSubscribe: Int): Unit {
        nativeLib.zsock_set_only_first_subscribe(self, onlyFirstSubscribe)
    }

    /**
     * Set socket option `hello_msg`.
     * Available from libzmq 4.3.0.
     */
    fun setHelloMsg(helloMsg: Zframe): Unit {
        nativeLib.zsock_set_hello_msg(self, helloMsg.self)
    }

    /**
     * Set socket option `disconnect_msg`.
     * Available from libzmq 4.3.0.
     */
    fun setDisconnectMsg(disconnectMsg: Zframe): Unit {
        nativeLib.zsock_set_disconnect_msg(self, disconnectMsg.self)
    }

    /**
     * Set socket option `wss_trust_system`.
     * Available from libzmq 4.3.0.
     */
    fun setWssTrustSystem(wssTrustSystem: Int): Unit {
        nativeLib.zsock_set_wss_trust_system(self, wssTrustSystem)
    }

    /**
     * Set socket option `wss_hostname`.
     * Available from libzmq 4.3.0.
     */
    fun setWssHostname(wssHostname: String): Unit {
        nativeLib.zsock_set_wss_hostname(self, wssHostname)
    }

    /**
     * Set socket option `wss_trust_pem`.
     * Available from libzmq 4.3.0.
     */
    fun setWssTrustPem(wssTrustPem: String): Unit {
        nativeLib.zsock_set_wss_trust_pem(self, wssTrustPem)
    }

    /**
     * Set socket option `wss_cert_pem`.
     * Available from libzmq 4.3.0.
     */
    fun setWssCertPem(wssCertPem: String): Unit {
        nativeLib.zsock_set_wss_cert_pem(self, wssCertPem)
    }

    /**
     * Set socket option `wss_key_pem`.
     * Available from libzmq 4.3.0.
     */
    fun setWssKeyPem(wssKeyPem: String): Unit {
        nativeLib.zsock_set_wss_key_pem(self, wssKeyPem)
    }

    /**
     * Get socket option `out_batch_size`.
     * Available from libzmq 4.3.0.
     */
    fun outBatchSize(): Int {
        return nativeLib.zsock_out_batch_size(self)
    }

    /**
     * Set socket option `out_batch_size`.
     * Available from libzmq 4.3.0.
     */
    fun setOutBatchSize(outBatchSize: Int): Unit {
        nativeLib.zsock_set_out_batch_size(self, outBatchSize)
    }

    /**
     * Get socket option `in_batch_size`.
     * Available from libzmq 4.3.0.
     */
    fun inBatchSize(): Int {
        return nativeLib.zsock_in_batch_size(self)
    }

    /**
     * Set socket option `in_batch_size`.
     * Available from libzmq 4.3.0.
     */
    fun setInBatchSize(inBatchSize: Int): Unit {
        nativeLib.zsock_set_in_batch_size(self, inBatchSize)
    }

    /**
     * Get socket option `socks_password`.
     * Available from libzmq 4.3.0.
     */
    fun socksPassword(): String {
        return nativeLib.zsock_socks_password(self)
    }

    /**
     * Set socket option `socks_password`.
     * Available from libzmq 4.3.0.
     */
    fun setSocksPassword(socksPassword: String): Unit {
        nativeLib.zsock_set_socks_password(self, socksPassword)
    }

    /**
     * Get socket option `socks_username`.
     * Available from libzmq 4.3.0.
     */
    fun socksUsername(): String {
        return nativeLib.zsock_socks_username(self)
    }

    /**
     * Set socket option `socks_username`.
     * Available from libzmq 4.3.0.
     */
    fun setSocksUsername(socksUsername: String): Unit {
        nativeLib.zsock_set_socks_username(self, socksUsername)
    }

    /**
     * Set socket option `xpub_manual_last_value`.
     * Available from libzmq 4.3.0.
     */
    fun setXpubManualLastValue(xpubManualLastValue: Int): Unit {
        nativeLib.zsock_set_xpub_manual_last_value(self, xpubManualLastValue)
    }

    /**
     * Get socket option `router_notify`.
     * Available from libzmq 4.3.0.
     */
    fun routerNotify(): Int {
        return nativeLib.zsock_router_notify(self)
    }

    /**
     * Set socket option `router_notify`.
     * Available from libzmq 4.3.0.
     */
    fun setRouterNotify(routerNotify: Int): Unit {
        nativeLib.zsock_set_router_notify(self, routerNotify)
    }

    /**
     * Get socket option `multicast_loop`.
     * Available from libzmq 4.3.0.
     */
    fun multicastLoop(): Int {
        return nativeLib.zsock_multicast_loop(self)
    }

    /**
     * Set socket option `multicast_loop`.
     * Available from libzmq 4.3.0.
     */
    fun setMulticastLoop(multicastLoop: Int): Unit {
        nativeLib.zsock_set_multicast_loop(self, multicastLoop)
    }

    /**
     * Get socket option `metadata`.
     * Available from libzmq 4.3.0.
     */
    fun metadata(): String {
        return nativeLib.zsock_metadata(self)
    }

    /**
     * Set socket option `metadata`.
     * Available from libzmq 4.3.0.
     */
    fun setMetadata(metadata: String): Unit {
        nativeLib.zsock_set_metadata(self, metadata)
    }

    /**
     * Get socket option `loopback_fastpath`.
     * Available from libzmq 4.3.0.
     */
    fun loopbackFastpath(): Int {
        return nativeLib.zsock_loopback_fastpath(self)
    }

    /**
     * Set socket option `loopback_fastpath`.
     * Available from libzmq 4.3.0.
     */
    fun setLoopbackFastpath(loopbackFastpath: Int): Unit {
        nativeLib.zsock_set_loopback_fastpath(self, loopbackFastpath)
    }

    /**
     * Get socket option `zap_enforce_domain`.
     * Available from libzmq 4.3.0.
     */
    fun zapEnforceDomain(): Int {
        return nativeLib.zsock_zap_enforce_domain(self)
    }

    /**
     * Set socket option `zap_enforce_domain`.
     * Available from libzmq 4.3.0.
     */
    fun setZapEnforceDomain(zapEnforceDomain: Int): Unit {
        nativeLib.zsock_set_zap_enforce_domain(self, zapEnforceDomain)
    }

    /**
     * Get socket option `gssapi_principal_nametype`.
     * Available from libzmq 4.3.0.
     */
    fun gssapiPrincipalNametype(): Int {
        return nativeLib.zsock_gssapi_principal_nametype(self)
    }

    /**
     * Set socket option `gssapi_principal_nametype`.
     * Available from libzmq 4.3.0.
     */
    fun setGssapiPrincipalNametype(gssapiPrincipalNametype: Int): Unit {
        nativeLib.zsock_set_gssapi_principal_nametype(self, gssapiPrincipalNametype)
    }

    /**
     * Get socket option `gssapi_service_principal_nametype`.
     * Available from libzmq 4.3.0.
     */
    fun gssapiServicePrincipalNametype(): Int {
        return nativeLib.zsock_gssapi_service_principal_nametype(self)
    }

    /**
     * Set socket option `gssapi_service_principal_nametype`.
     * Available from libzmq 4.3.0.
     */
    fun setGssapiServicePrincipalNametype(gssapiServicePrincipalNametype: Int): Unit {
        nativeLib.zsock_set_gssapi_service_principal_nametype(self, gssapiServicePrincipalNametype)
    }

    /**
     * Get socket option `bindtodevice`.
     * Available from libzmq 4.3.0.
     */
    fun bindtodevice(): String {
        return nativeLib.zsock_bindtodevice(self)
    }

    /**
     * Set socket option `bindtodevice`.
     * Available from libzmq 4.3.0.
     */
    fun setBindtodevice(bindtodevice: String): Unit {
        nativeLib.zsock_set_bindtodevice(self, bindtodevice)
    }

    /**
     * Get socket option `heartbeat_ivl`.
     * Available from libzmq 4.2.0.
     */
    fun heartbeatIvl(): Int {
        return nativeLib.zsock_heartbeat_ivl(self)
    }

    /**
     * Set socket option `heartbeat_ivl`.
     * Available from libzmq 4.2.0.
     */
    fun setHeartbeatIvl(heartbeatIvl: Int): Unit {
        nativeLib.zsock_set_heartbeat_ivl(self, heartbeatIvl)
    }

    /**
     * Get socket option `heartbeat_ttl`.
     * Available from libzmq 4.2.0.
     */
    fun heartbeatTtl(): Int {
        return nativeLib.zsock_heartbeat_ttl(self)
    }

    /**
     * Set socket option `heartbeat_ttl`.
     * Available from libzmq 4.2.0.
     */
    fun setHeartbeatTtl(heartbeatTtl: Int): Unit {
        nativeLib.zsock_set_heartbeat_ttl(self, heartbeatTtl)
    }

    /**
     * Get socket option `heartbeat_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun heartbeatTimeout(): Int {
        return nativeLib.zsock_heartbeat_timeout(self)
    }

    /**
     * Set socket option `heartbeat_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun setHeartbeatTimeout(heartbeatTimeout: Int): Unit {
        nativeLib.zsock_set_heartbeat_timeout(self, heartbeatTimeout)
    }

    /**
     * Get socket option `use_fd`.
     * Available from libzmq 4.2.0.
     */
    fun useFd(): Int {
        return nativeLib.zsock_use_fd(self)
    }

    /**
     * Set socket option `use_fd`.
     * Available from libzmq 4.2.0.
     */
    fun setUseFd(useFd: Int): Unit {
        nativeLib.zsock_set_use_fd(self, useFd)
    }

    /**
     * Set socket option `xpub_manual`.
     * Available from libzmq 4.2.0.
     */
    fun setXpubManual(xpubManual: Int): Unit {
        nativeLib.zsock_set_xpub_manual(self, xpubManual)
    }

    /**
     * Set socket option `xpub_welcome_msg`.
     * Available from libzmq 4.2.0.
     */
    fun setXpubWelcomeMsg(xpubWelcomeMsg: String): Unit {
        nativeLib.zsock_set_xpub_welcome_msg(self, xpubWelcomeMsg)
    }

    /**
     * Set socket option `stream_notify`.
     * Available from libzmq 4.2.0.
     */
    fun setStreamNotify(streamNotify: Int): Unit {
        nativeLib.zsock_set_stream_notify(self, streamNotify)
    }

    /**
     * Get socket option `invert_matching`.
     * Available from libzmq 4.2.0.
     */
    fun invertMatching(): Int {
        return nativeLib.zsock_invert_matching(self)
    }

    /**
     * Set socket option `invert_matching`.
     * Available from libzmq 4.2.0.
     */
    fun setInvertMatching(invertMatching: Int): Unit {
        nativeLib.zsock_set_invert_matching(self, invertMatching)
    }

    /**
     * Set socket option `xpub_verboser`.
     * Available from libzmq 4.2.0.
     */
    fun setXpubVerboser(xpubVerboser: Int): Unit {
        nativeLib.zsock_set_xpub_verboser(self, xpubVerboser)
    }

    /**
     * Get socket option `connect_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun connectTimeout(): Int {
        return nativeLib.zsock_connect_timeout(self)
    }

    /**
     * Set socket option `connect_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun setConnectTimeout(connectTimeout: Int): Unit {
        nativeLib.zsock_set_connect_timeout(self, connectTimeout)
    }

    /**
     * Get socket option `tcp_maxrt`.
     * Available from libzmq 4.2.0.
     */
    fun tcpMaxrt(): Int {
        return nativeLib.zsock_tcp_maxrt(self)
    }

    /**
     * Set socket option `tcp_maxrt`.
     * Available from libzmq 4.2.0.
     */
    fun setTcpMaxrt(tcpMaxrt: Int): Unit {
        nativeLib.zsock_set_tcp_maxrt(self, tcpMaxrt)
    }

    /**
     * Get socket option `thread_safe`.
     * Available from libzmq 4.2.0.
     */
    fun threadSafe(): Int {
        return nativeLib.zsock_thread_safe(self)
    }

    /**
     * Get socket option `multicast_maxtpdu`.
     * Available from libzmq 4.2.0.
     */
    fun multicastMaxtpdu(): Int {
        return nativeLib.zsock_multicast_maxtpdu(self)
    }

    /**
     * Set socket option `multicast_maxtpdu`.
     * Available from libzmq 4.2.0.
     */
    fun setMulticastMaxtpdu(multicastMaxtpdu: Int): Unit {
        nativeLib.zsock_set_multicast_maxtpdu(self, multicastMaxtpdu)
    }

    /**
     * Get socket option `vmci_buffer_size`.
     * Available from libzmq 4.2.0.
     */
    fun vmciBufferSize(): Int {
        return nativeLib.zsock_vmci_buffer_size(self)
    }

    /**
     * Set socket option `vmci_buffer_size`.
     * Available from libzmq 4.2.0.
     */
    fun setVmciBufferSize(vmciBufferSize: Int): Unit {
        nativeLib.zsock_set_vmci_buffer_size(self, vmciBufferSize)
    }

    /**
     * Get socket option `vmci_buffer_min_size`.
     * Available from libzmq 4.2.0.
     */
    fun vmciBufferMinSize(): Int {
        return nativeLib.zsock_vmci_buffer_min_size(self)
    }

    /**
     * Set socket option `vmci_buffer_min_size`.
     * Available from libzmq 4.2.0.
     */
    fun setVmciBufferMinSize(vmciBufferMinSize: Int): Unit {
        nativeLib.zsock_set_vmci_buffer_min_size(self, vmciBufferMinSize)
    }

    /**
     * Get socket option `vmci_buffer_max_size`.
     * Available from libzmq 4.2.0.
     */
    fun vmciBufferMaxSize(): Int {
        return nativeLib.zsock_vmci_buffer_max_size(self)
    }

    /**
     * Set socket option `vmci_buffer_max_size`.
     * Available from libzmq 4.2.0.
     */
    fun setVmciBufferMaxSize(vmciBufferMaxSize: Int): Unit {
        nativeLib.zsock_set_vmci_buffer_max_size(self, vmciBufferMaxSize)
    }

    /**
     * Get socket option `vmci_connect_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun vmciConnectTimeout(): Int {
        return nativeLib.zsock_vmci_connect_timeout(self)
    }

    /**
     * Set socket option `vmci_connect_timeout`.
     * Available from libzmq 4.2.0.
     */
    fun setVmciConnectTimeout(vmciConnectTimeout: Int): Unit {
        nativeLib.zsock_set_vmci_connect_timeout(self, vmciConnectTimeout)
    }

    /**
     * Get socket option `tos`.
     * Available from libzmq 4.1.0.
     */
    fun tos(): Int {
        return nativeLib.zsock_tos(self)
    }

    /**
     * Set socket option `tos`.
     * Available from libzmq 4.1.0.
     */
    fun setTos(tos: Int): Unit {
        nativeLib.zsock_set_tos(self, tos)
    }

    /**
     * Set socket option `router_handover`.
     * Available from libzmq 4.1.0.
     */
    fun setRouterHandover(routerHandover: Int): Unit {
        nativeLib.zsock_set_router_handover(self, routerHandover)
    }

    /**
     * Set socket option `connect_rid`.
     * Available from libzmq 4.1.0.
     */
    fun setConnectRid(connectRid: String): Unit {
        nativeLib.zsock_set_connect_rid(self, connectRid)
    }

    /**
     * Set socket option `connect_rid` from 32-octet binary
     * Available from libzmq 4.1.0.
     */
    fun setConnectRidBin(connectRid: ByteArray): Unit {
        nativeLib.zsock_set_connect_rid_bin(self, connectRid)
    }

    /**
     * Get socket option `handshake_ivl`.
     * Available from libzmq 4.1.0.
     */
    fun handshakeIvl(): Int {
        return nativeLib.zsock_handshake_ivl(self)
    }

    /**
     * Set socket option `handshake_ivl`.
     * Available from libzmq 4.1.0.
     */
    fun setHandshakeIvl(handshakeIvl: Int): Unit {
        nativeLib.zsock_set_handshake_ivl(self, handshakeIvl)
    }

    /**
     * Get socket option `socks_proxy`.
     * Available from libzmq 4.1.0.
     */
    fun socksProxy(): String {
        return nativeLib.zsock_socks_proxy(self)
    }

    /**
     * Set socket option `socks_proxy`.
     * Available from libzmq 4.1.0.
     */
    fun setSocksProxy(socksProxy: String): Unit {
        nativeLib.zsock_set_socks_proxy(self, socksProxy)
    }

    /**
     * Set socket option `xpub_nodrop`.
     * Available from libzmq 4.1.0.
     */
    fun setXpubNodrop(xpubNodrop: Int): Unit {
        nativeLib.zsock_set_xpub_nodrop(self, xpubNodrop)
    }

    /**
     * Set socket option `router_mandatory`.
     * Available from libzmq 4.0.0.
     */
    fun setRouterMandatory(routerMandatory: Int): Unit {
        nativeLib.zsock_set_router_mandatory(self, routerMandatory)
    }

    /**
     * Set socket option `probe_router`.
     * Available from libzmq 4.0.0.
     */
    fun setProbeRouter(probeRouter: Int): Unit {
        nativeLib.zsock_set_probe_router(self, probeRouter)
    }

    /**
     * Set socket option `req_relaxed`.
     * Available from libzmq 4.0.0.
     */
    fun setReqRelaxed(reqRelaxed: Int): Unit {
        nativeLib.zsock_set_req_relaxed(self, reqRelaxed)
    }

    /**
     * Set socket option `req_correlate`.
     * Available from libzmq 4.0.0.
     */
    fun setReqCorrelate(reqCorrelate: Int): Unit {
        nativeLib.zsock_set_req_correlate(self, reqCorrelate)
    }

    /**
     * Set socket option `conflate`.
     * Available from libzmq 4.0.0.
     */
    fun setConflate(conflate: Int): Unit {
        nativeLib.zsock_set_conflate(self, conflate)
    }

    /**
     * Get socket option `zap_domain`.
     * Available from libzmq 4.0.0.
     */
    fun zapDomain(): String {
        return nativeLib.zsock_zap_domain(self)
    }

    /**
     * Set socket option `zap_domain`.
     * Available from libzmq 4.0.0.
     */
    fun setZapDomain(zapDomain: String): Unit {
        nativeLib.zsock_set_zap_domain(self, zapDomain)
    }

    /**
     * Get socket option `mechanism`.
     * Available from libzmq 4.0.0.
     */
    fun mechanism(): Int {
        return nativeLib.zsock_mechanism(self)
    }

    /**
     * Get socket option `plain_server`.
     * Available from libzmq 4.0.0.
     */
    fun plainServer(): Int {
        return nativeLib.zsock_plain_server(self)
    }

    /**
     * Set socket option `plain_server`.
     * Available from libzmq 4.0.0.
     */
    fun setPlainServer(plainServer: Int): Unit {
        nativeLib.zsock_set_plain_server(self, plainServer)
    }

    /**
     * Get socket option `plain_username`.
     * Available from libzmq 4.0.0.
     */
    fun plainUsername(): String {
        return nativeLib.zsock_plain_username(self)
    }

    /**
     * Set socket option `plain_username`.
     * Available from libzmq 4.0.0.
     */
    fun setPlainUsername(plainUsername: String): Unit {
        nativeLib.zsock_set_plain_username(self, plainUsername)
    }

    /**
     * Get socket option `plain_password`.
     * Available from libzmq 4.0.0.
     */
    fun plainPassword(): String {
        return nativeLib.zsock_plain_password(self)
    }

    /**
     * Set socket option `plain_password`.
     * Available from libzmq 4.0.0.
     */
    fun setPlainPassword(plainPassword: String): Unit {
        nativeLib.zsock_set_plain_password(self, plainPassword)
    }

    /**
     * Get socket option `curve_server`.
     * Available from libzmq 4.0.0.
     */
    fun curveServer(): Int {
        return nativeLib.zsock_curve_server(self)
    }

    /**
     * Set socket option `curve_server`.
     * Available from libzmq 4.0.0.
     */
    fun setCurveServer(curveServer: Int): Unit {
        nativeLib.zsock_set_curve_server(self, curveServer)
    }

    /**
     * Get socket option `curve_publickey`.
     * Available from libzmq 4.0.0.
     */
    fun curvePublickey(): String {
        return nativeLib.zsock_curve_publickey(self)
    }

    /**
     * Set socket option `curve_publickey`.
     * Available from libzmq 4.0.0.
     */
    fun setCurvePublickey(curvePublickey: String): Unit {
        nativeLib.zsock_set_curve_publickey(self, curvePublickey)
    }

    /**
     * Set socket option `curve_publickey` from 32-octet binary
     * Available from libzmq 4.0.0.
     */
    fun setCurvePublickeyBin(curvePublickey: ByteArray): Unit {
        nativeLib.zsock_set_curve_publickey_bin(self, curvePublickey)
    }

    /**
     * Get socket option `curve_secretkey`.
     * Available from libzmq 4.0.0.
     */
    fun curveSecretkey(): String {
        return nativeLib.zsock_curve_secretkey(self)
    }

    /**
     * Set socket option `curve_secretkey`.
     * Available from libzmq 4.0.0.
     */
    fun setCurveSecretkey(curveSecretkey: String): Unit {
        nativeLib.zsock_set_curve_secretkey(self, curveSecretkey)
    }

    /**
     * Set socket option `curve_secretkey` from 32-octet binary
     * Available from libzmq 4.0.0.
     */
    fun setCurveSecretkeyBin(curveSecretkey: ByteArray): Unit {
        nativeLib.zsock_set_curve_secretkey_bin(self, curveSecretkey)
    }

    /**
     * Get socket option `curve_serverkey`.
     * Available from libzmq 4.0.0.
     */
    fun curveServerkey(): String {
        return nativeLib.zsock_curve_serverkey(self)
    }

    /**
     * Set socket option `curve_serverkey`.
     * Available from libzmq 4.0.0.
     */
    fun setCurveServerkey(curveServerkey: String): Unit {
        nativeLib.zsock_set_curve_serverkey(self, curveServerkey)
    }

    /**
     * Set socket option `curve_serverkey` from 32-octet binary
     * Available from libzmq 4.0.0.
     */
    fun setCurveServerkeyBin(curveServerkey: ByteArray): Unit {
        nativeLib.zsock_set_curve_serverkey_bin(self, curveServerkey)
    }

    /**
     * Get socket option `gssapi_server`.
     * Available from libzmq 4.0.0.
     */
    fun gssapiServer(): Int {
        return nativeLib.zsock_gssapi_server(self)
    }

    /**
     * Set socket option `gssapi_server`.
     * Available from libzmq 4.0.0.
     */
    fun setGssapiServer(gssapiServer: Int): Unit {
        nativeLib.zsock_set_gssapi_server(self, gssapiServer)
    }

    /**
     * Get socket option `gssapi_plaintext`.
     * Available from libzmq 4.0.0.
     */
    fun gssapiPlaintext(): Int {
        return nativeLib.zsock_gssapi_plaintext(self)
    }

    /**
     * Set socket option `gssapi_plaintext`.
     * Available from libzmq 4.0.0.
     */
    fun setGssapiPlaintext(gssapiPlaintext: Int): Unit {
        nativeLib.zsock_set_gssapi_plaintext(self, gssapiPlaintext)
    }

    /**
     * Get socket option `gssapi_principal`.
     * Available from libzmq 4.0.0.
     */
    fun gssapiPrincipal(): String {
        return nativeLib.zsock_gssapi_principal(self)
    }

    /**
     * Set socket option `gssapi_principal`.
     * Available from libzmq 4.0.0.
     */
    fun setGssapiPrincipal(gssapiPrincipal: String): Unit {
        nativeLib.zsock_set_gssapi_principal(self, gssapiPrincipal)
    }

    /**
     * Get socket option `gssapi_service_principal`.
     * Available from libzmq 4.0.0.
     */
    fun gssapiServicePrincipal(): String {
        return nativeLib.zsock_gssapi_service_principal(self)
    }

    /**
     * Set socket option `gssapi_service_principal`.
     * Available from libzmq 4.0.0.
     */
    fun setGssapiServicePrincipal(gssapiServicePrincipal: String): Unit {
        nativeLib.zsock_set_gssapi_service_principal(self, gssapiServicePrincipal)
    }

    /**
     * Get socket option `ipv6`.
     * Available from libzmq 4.0.0.
     */
    fun ipv6(): Int {
        return nativeLib.zsock_ipv6(self)
    }

    /**
     * Set socket option `ipv6`.
     * Available from libzmq 4.0.0.
     */
    fun setIpv6(ipv6: Int): Unit {
        nativeLib.zsock_set_ipv6(self, ipv6)
    }

    /**
     * Get socket option `immediate`.
     * Available from libzmq 4.0.0.
     */
    fun immediate(): Int {
        return nativeLib.zsock_immediate(self)
    }

    /**
     * Set socket option `immediate`.
     * Available from libzmq 4.0.0.
     */
    fun setImmediate(immediate: Int): Unit {
        nativeLib.zsock_set_immediate(self, immediate)
    }

    /**
     * Get socket option `sndhwm`.
     * Available from libzmq 3.0.0.
     */
    fun sndhwm(): Int {
        return nativeLib.zsock_sndhwm(self)
    }

    /**
     * Set socket option `sndhwm`.
     * Available from libzmq 3.0.0.
     */
    fun setSndhwm(sndhwm: Int): Unit {
        nativeLib.zsock_set_sndhwm(self, sndhwm)
    }

    /**
     * Get socket option `rcvhwm`.
     * Available from libzmq 3.0.0.
     */
    fun rcvhwm(): Int {
        return nativeLib.zsock_rcvhwm(self)
    }

    /**
     * Set socket option `rcvhwm`.
     * Available from libzmq 3.0.0.
     */
    fun setRcvhwm(rcvhwm: Int): Unit {
        nativeLib.zsock_set_rcvhwm(self, rcvhwm)
    }

    /**
     * Get socket option `maxmsgsize`.
     * Available from libzmq 3.0.0.
     */
    fun maxmsgsize(): Int {
        return nativeLib.zsock_maxmsgsize(self)
    }

    /**
     * Set socket option `maxmsgsize`.
     * Available from libzmq 3.0.0.
     */
    fun setMaxmsgsize(maxmsgsize: Int): Unit {
        nativeLib.zsock_set_maxmsgsize(self, maxmsgsize)
    }

    /**
     * Get socket option `multicast_hops`.
     * Available from libzmq 3.0.0.
     */
    fun multicastHops(): Int {
        return nativeLib.zsock_multicast_hops(self)
    }

    /**
     * Set socket option `multicast_hops`.
     * Available from libzmq 3.0.0.
     */
    fun setMulticastHops(multicastHops: Int): Unit {
        nativeLib.zsock_set_multicast_hops(self, multicastHops)
    }

    /**
     * Set socket option `xpub_verbose`.
     * Available from libzmq 3.0.0.
     */
    fun setXpubVerbose(xpubVerbose: Int): Unit {
        nativeLib.zsock_set_xpub_verbose(self, xpubVerbose)
    }

    /**
     * Get socket option `tcp_keepalive`.
     * Available from libzmq 3.0.0.
     */
    fun tcpKeepalive(): Int {
        return nativeLib.zsock_tcp_keepalive(self)
    }

    /**
     * Set socket option `tcp_keepalive`.
     * Available from libzmq 3.0.0.
     */
    fun setTcpKeepalive(tcpKeepalive: Int): Unit {
        nativeLib.zsock_set_tcp_keepalive(self, tcpKeepalive)
    }

    /**
     * Get socket option `tcp_keepalive_idle`.
     * Available from libzmq 3.0.0.
     */
    fun tcpKeepaliveIdle(): Int {
        return nativeLib.zsock_tcp_keepalive_idle(self)
    }

    /**
     * Set socket option `tcp_keepalive_idle`.
     * Available from libzmq 3.0.0.
     */
    fun setTcpKeepaliveIdle(tcpKeepaliveIdle: Int): Unit {
        nativeLib.zsock_set_tcp_keepalive_idle(self, tcpKeepaliveIdle)
    }

    /**
     * Get socket option `tcp_keepalive_cnt`.
     * Available from libzmq 3.0.0.
     */
    fun tcpKeepaliveCnt(): Int {
        return nativeLib.zsock_tcp_keepalive_cnt(self)
    }

    /**
     * Set socket option `tcp_keepalive_cnt`.
     * Available from libzmq 3.0.0.
     */
    fun setTcpKeepaliveCnt(tcpKeepaliveCnt: Int): Unit {
        nativeLib.zsock_set_tcp_keepalive_cnt(self, tcpKeepaliveCnt)
    }

    /**
     * Get socket option `tcp_keepalive_intvl`.
     * Available from libzmq 3.0.0.
     */
    fun tcpKeepaliveIntvl(): Int {
        return nativeLib.zsock_tcp_keepalive_intvl(self)
    }

    /**
     * Set socket option `tcp_keepalive_intvl`.
     * Available from libzmq 3.0.0.
     */
    fun setTcpKeepaliveIntvl(tcpKeepaliveIntvl: Int): Unit {
        nativeLib.zsock_set_tcp_keepalive_intvl(self, tcpKeepaliveIntvl)
    }

    /**
     * Get socket option `tcp_accept_filter`.
     * Available from libzmq 3.0.0.
     */
    fun tcpAcceptFilter(): String {
        return nativeLib.zsock_tcp_accept_filter(self)
    }

    /**
     * Set socket option `tcp_accept_filter`.
     * Available from libzmq 3.0.0.
     */
    fun setTcpAcceptFilter(tcpAcceptFilter: String): Unit {
        nativeLib.zsock_set_tcp_accept_filter(self, tcpAcceptFilter)
    }

    /**
     * Get socket option `last_endpoint`.
     * Available from libzmq 3.0.0.
     */
    fun lastEndpoint(): String {
        return nativeLib.zsock_last_endpoint(self)
    }

    /**
     * Set socket option `router_raw`.
     * Available from libzmq 3.0.0.
     */
    fun setRouterRaw(routerRaw: Int): Unit {
        nativeLib.zsock_set_router_raw(self, routerRaw)
    }

    /**
     * Get socket option `ipv4only`.
     * Available from libzmq 3.0.0.
     */
    fun ipv4only(): Int {
        return nativeLib.zsock_ipv4only(self)
    }

    /**
     * Set socket option `ipv4only`.
     * Available from libzmq 3.0.0.
     */
    fun setIpv4only(ipv4only: Int): Unit {
        nativeLib.zsock_set_ipv4only(self, ipv4only)
    }

    /**
     * Set socket option `delay_attach_on_connect`.
     * Available from libzmq 3.0.0.
     */
    fun setDelayAttachOnConnect(delayAttachOnConnect: Int): Unit {
        nativeLib.zsock_set_delay_attach_on_connect(self, delayAttachOnConnect)
    }

    /**
     * Get socket option `hwm`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun hwm(): Int {
        return nativeLib.zsock_hwm(self)
    }

    /**
     * Set socket option `hwm`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun setHwm(hwm: Int): Unit {
        nativeLib.zsock_set_hwm(self, hwm)
    }

    /**
     * Get socket option `swap`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun swap(): Int {
        return nativeLib.zsock_swap(self)
    }

    /**
     * Set socket option `swap`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun setSwap(swap: Int): Unit {
        nativeLib.zsock_set_swap(self, swap)
    }

    /**
     * Get socket option `affinity`.
     * Available from libzmq 2.0.0.
     */
    fun affinity(): Int {
        return nativeLib.zsock_affinity(self)
    }

    /**
     * Set socket option `affinity`.
     * Available from libzmq 2.0.0.
     */
    fun setAffinity(affinity: Int): Unit {
        nativeLib.zsock_set_affinity(self, affinity)
    }

    /**
     * Get socket option `identity`.
     * Available from libzmq 2.0.0.
     */
    fun identity(): String {
        return nativeLib.zsock_identity(self)
    }

    /**
     * Set socket option `identity`.
     * Available from libzmq 2.0.0.
     */
    fun setIdentity(identity: String): Unit {
        nativeLib.zsock_set_identity(self, identity)
    }

    /**
     * Get socket option `rate`.
     * Available from libzmq 2.0.0.
     */
    fun rate(): Int {
        return nativeLib.zsock_rate(self)
    }

    /**
     * Set socket option `rate`.
     * Available from libzmq 2.0.0.
     */
    fun setRate(rate: Int): Unit {
        nativeLib.zsock_set_rate(self, rate)
    }

    /**
     * Get socket option `recovery_ivl`.
     * Available from libzmq 2.0.0.
     */
    fun recoveryIvl(): Int {
        return nativeLib.zsock_recovery_ivl(self)
    }

    /**
     * Set socket option `recovery_ivl`.
     * Available from libzmq 2.0.0.
     */
    fun setRecoveryIvl(recoveryIvl: Int): Unit {
        nativeLib.zsock_set_recovery_ivl(self, recoveryIvl)
    }

    /**
     * Get socket option `recovery_ivl_msec`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun recoveryIvlMsec(): Int {
        return nativeLib.zsock_recovery_ivl_msec(self)
    }

    /**
     * Set socket option `recovery_ivl_msec`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun setRecoveryIvlMsec(recoveryIvlMsec: Int): Unit {
        nativeLib.zsock_set_recovery_ivl_msec(self, recoveryIvlMsec)
    }

    /**
     * Get socket option `mcast_loop`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun mcastLoop(): Int {
        return nativeLib.zsock_mcast_loop(self)
    }

    /**
     * Set socket option `mcast_loop`.
     * Available from libzmq 2.0.0 to 3.0.0.
     */
    fun setMcastLoop(mcastLoop: Int): Unit {
        nativeLib.zsock_set_mcast_loop(self, mcastLoop)
    }

    /**
     * Get socket option `rcvtimeo`.
     * Available from libzmq 2.2.0.
     */
    fun rcvtimeo(): Int {
        return nativeLib.zsock_rcvtimeo(self)
    }

    /**
     * Set socket option `rcvtimeo`.
     * Available from libzmq 2.2.0.
     */
    fun setRcvtimeo(rcvtimeo: Int): Unit {
        nativeLib.zsock_set_rcvtimeo(self, rcvtimeo)
    }

    /**
     * Get socket option `sndtimeo`.
     * Available from libzmq 2.2.0.
     */
    fun sndtimeo(): Int {
        return nativeLib.zsock_sndtimeo(self)
    }

    /**
     * Set socket option `sndtimeo`.
     * Available from libzmq 2.2.0.
     */
    fun setSndtimeo(sndtimeo: Int): Unit {
        nativeLib.zsock_set_sndtimeo(self, sndtimeo)
    }

    /**
     * Get socket option `sndbuf`.
     * Available from libzmq 2.0.0.
     */
    fun sndbuf(): Int {
        return nativeLib.zsock_sndbuf(self)
    }

    /**
     * Set socket option `sndbuf`.
     * Available from libzmq 2.0.0.
     */
    fun setSndbuf(sndbuf: Int): Unit {
        nativeLib.zsock_set_sndbuf(self, sndbuf)
    }

    /**
     * Get socket option `rcvbuf`.
     * Available from libzmq 2.0.0.
     */
    fun rcvbuf(): Int {
        return nativeLib.zsock_rcvbuf(self)
    }

    /**
     * Set socket option `rcvbuf`.
     * Available from libzmq 2.0.0.
     */
    fun setRcvbuf(rcvbuf: Int): Unit {
        nativeLib.zsock_set_rcvbuf(self, rcvbuf)
    }

    /**
     * Get socket option `linger`.
     * Available from libzmq 2.0.0.
     */
    fun linger(): Int {
        return nativeLib.zsock_linger(self)
    }

    /**
     * Set socket option `linger`.
     * Available from libzmq 2.0.0.
     */
    fun setLinger(linger: Int): Unit {
        nativeLib.zsock_set_linger(self, linger)
    }

    /**
     * Get socket option `reconnect_ivl`.
     * Available from libzmq 2.0.0.
     */
    fun reconnectIvl(): Int {
        return nativeLib.zsock_reconnect_ivl(self)
    }

    /**
     * Set socket option `reconnect_ivl`.
     * Available from libzmq 2.0.0.
     */
    fun setReconnectIvl(reconnectIvl: Int): Unit {
        nativeLib.zsock_set_reconnect_ivl(self, reconnectIvl)
    }

    /**
     * Get socket option `reconnect_ivl_max`.
     * Available from libzmq 2.0.0.
     */
    fun reconnectIvlMax(): Int {
        return nativeLib.zsock_reconnect_ivl_max(self)
    }

    /**
     * Set socket option `reconnect_ivl_max`.
     * Available from libzmq 2.0.0.
     */
    fun setReconnectIvlMax(reconnectIvlMax: Int): Unit {
        nativeLib.zsock_set_reconnect_ivl_max(self, reconnectIvlMax)
    }

    /**
     * Get socket option `backlog`.
     * Available from libzmq 2.0.0.
     */
    fun backlog(): Int {
        return nativeLib.zsock_backlog(self)
    }

    /**
     * Set socket option `backlog`.
     * Available from libzmq 2.0.0.
     */
    fun setBacklog(backlog: Int): Unit {
        nativeLib.zsock_set_backlog(self, backlog)
    }

    /**
     * Set socket option `subscribe`.
     * Available from libzmq 2.0.0.
     */
    fun setSubscribe(subscribe: String): Unit {
        nativeLib.zsock_set_subscribe(self, subscribe)
    }

    /**
     * Set socket option `unsubscribe`.
     * Available from libzmq 2.0.0.
     */
    fun setUnsubscribe(unsubscribe: String): Unit {
        nativeLib.zsock_set_unsubscribe(self, unsubscribe)
    }

    /**
     * Get socket option `type`.
     * Available from libzmq 2.0.0.
     */
    fun type(): Int {
        return nativeLib.zsock_type(self)
    }

    /**
     * Get socket option `rcvmore`.
     * Available from libzmq 2.0.0.
     */
    fun rcvmore(): Int {
        return nativeLib.zsock_rcvmore(self)
    }

    /**
     * Get socket option `events`.
     * Available from libzmq 2.0.0.
     */
    fun events(): Int {
        return nativeLib.zsock_events(self)
    }

}
