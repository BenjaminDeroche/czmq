/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Ztrie {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun ztrie_new(delimiter: Char): Pointer
        fun destroy(self: Pointer)
        fun ztrie_remove_route(self: Pointer, path: String): Int
        fun ztrie_matches(self: Pointer, path: String): Boolean
        fun ztrie_hit_data(self: Pointer): Pointer
        fun ztrie_hit_parameter_count(self: Pointer): Pointer
        fun ztrie_hit_parameters(self: Pointer): Pointer
        fun ztrie_hit_asterisk_match(self: Pointer): String
        fun ztrie_print(self: Pointer): Unit
        fun ztrie_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.ztrie_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Creates a new ztrie.
     */
    constructor(delimiter: Char) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.ztrie_new(delimiter)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy the ztrie.
     */
//    @Override
//    public void close () {
//        nativeLib.ztrie_destroy(self)
//        self = 0
//    }
//
    /**
     * Removes a route from the trie and destroys its data. Returns -1 if the
     * route does not exists, otherwise 0.
     * the start of the list call zlist_first (). Advances the cursor.
     */
    fun removeRoute(path: String): Int {
        return nativeLib.ztrie_remove_route(self, path)
    }

    /**
     * Returns true if the path matches a route in the tree, otherwise false.
     */
    fun matches(path: String): Boolean {
        return nativeLib.ztrie_matches(self, path)
    }

    /**
     * Returns the data of a matched route from last ztrie_matches. If the path
     * did not match, returns NULL. Do not delete the data as it's owned by
     * ztrie.
     */
    fun hitData(): Pointer {
        return nativeLib.ztrie_hit_data(self)
    }

    /**
     * Returns the count of parameters that a matched route has.
     */
    fun hitParameterCount(): Pointer {
        return nativeLib.ztrie_hit_parameter_count(self)
    }

    /**
     * Returns the parameters of a matched route with named regexes from last
     * ztrie_matches. If the path did not match or the route did not contain any
     * named regexes, returns NULL.
     */
    fun hitParameters(): Zhashx {
        return Zhashx (nativeLib.ztrie_hit_parameters(self))
    }

    /**
     * Returns the asterisk matched part of a route, if there has been no match
     * or no asterisk match, returns NULL.
     */
    fun hitAsteriskMatch(): String {
        return nativeLib.ztrie_hit_asterisk_match(self)
    }

    /**
     * Print the trie
     */
    fun print(): Unit {
        nativeLib.ztrie_print(self)
    }

}
