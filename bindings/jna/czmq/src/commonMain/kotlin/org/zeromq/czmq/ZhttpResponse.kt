/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class ZhttpResponse {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zhttp_response_new(): Pointer
        fun destroy(self: Pointer)
        fun zhttp_response_send(self: Pointer, sock: Pointer, connection: Pointer): Int
        fun zhttp_response_recv(self: Pointer, client: Pointer, arg: Pointer, arg2: Pointer): Int
        fun zhttp_response_content_type(self: Pointer): String
        fun zhttp_response_set_content_type(self: Pointer, value: String): Unit
        fun zhttp_response_status_code(self: Pointer): Int
        fun zhttp_response_set_status_code(self: Pointer, statusCode: Int): Unit
        fun zhttp_response_headers(self: Pointer): Pointer
        fun zhttp_response_content_length(self: Pointer): Pointer
        fun zhttp_response_content(self: Pointer): String
        fun zhttp_response_get_content(self: Pointer): String
        fun zhttp_response_set_content_const(self: Pointer, content: String): Unit
        fun zhttp_response_reset_content(self: Pointer): Unit
        fun zhttp_response_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zhttp_response_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new zhttp_response.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zhttp_response_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy the zhttp_response.
     */
//    @Override
//    public void close () {
//        nativeLib.zhttp_response_destroy(self)
//        self = 0
//    }
//
    /**
     * Send a response to a request.
     * Returns 0 if successful and -1 otherwise.
     */
    fun send(sock: Zsock, connection: Pointer): Int {
        return nativeLib.zhttp_response_send(self, sock.self, connection)
    }

    /**
     * Receive a response from zhttp_client.
     * On success return 0, -1 otherwise.
     *
     * Recv returns the two user arguments which was provided with the request.
     * The reason for two, is to be able to pass around the server connection when forwarding requests or both a callback function and an argument.
     */
    fun recv(client: ZhttpClient, arg: Pointer, arg2: Pointer): Int {
        return nativeLib.zhttp_response_recv(self, client.self, arg, arg2)
    }

    /**
     * Get the response content type
     */
    fun contentType(): String {
        return nativeLib.zhttp_response_content_type(self)
    }

    /**
     * Set the content type of the response.
     */
    fun setContentType(value: String): Unit {
        nativeLib.zhttp_response_set_content_type(self, value)
    }

    /**
     * Get the status code of the response.
     */
    fun statusCode(): Int {
        return nativeLib.zhttp_response_status_code(self)
    }

    /**
     * Set the status code of the response.
     */
    fun setStatusCode(statusCode: Int): Unit {
        nativeLib.zhttp_response_set_status_code(self, statusCode)
    }

    /**
     * Get the headers of the response.
     */
    fun headers(): Zhash {
        return Zhash (nativeLib.zhttp_response_headers(self))
    }

    /**
     * Get the content length of the response
     */
    fun contentLength(): Pointer {
        return nativeLib.zhttp_response_content_length(self)
    }

    /**
     * Get the content of the response.
     */
    fun content(): String {
        return nativeLib.zhttp_response_content(self)
    }

    /**
     * Get the content of the response.
     */
    fun getContent(): String {
        return nativeLib.zhttp_response_get_content(self)
    }

    /**
     * Set the content of the response.
     * The content is assumed to be constant-memory and will therefore not be copied or deallocated in any way.
     */
    fun setContentConst(content: String): Unit {
        nativeLib.zhttp_response_set_content_const(self, content)
    }

    /**
     * Set the content to NULL
     */
    fun resetContent(): Unit {
        nativeLib.zhttp_response_reset_content(self)
    }

}
