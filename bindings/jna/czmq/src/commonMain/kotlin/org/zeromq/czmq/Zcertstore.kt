/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zcertstore {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zcertstore_new(location: String): Pointer
        fun destroy(self: Pointer)
        fun zcertstore_lookup(self: Pointer, publicKey: String): Pointer
        fun zcertstore_insert(self: Pointer, certP: Pointer): Unit
        fun zcertstore_empty(self: Pointer): Unit
        fun zcertstore_print(self: Pointer): Unit
        fun zcertstore_certs(self: Pointer): Pointer
        fun zcertstore_state(self: Pointer): Pointer
        fun zcertstore_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zcertstore_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new certificate store from a disk directory, loading and
     * indexing all certificates in that location. The directory itself may be
     * absent, and created later, or modified at any time. The certificate store
     * is automatically refreshed on any zcertstore_lookup() call. If the
     * location is specified as NULL, creates a pure-memory store, which you
     * can work with by inserting certificates at runtime.
     */
    constructor(location: String) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zcertstore_new(location)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy a certificate store object in memory. Does not affect anything
     * stored on disk.
     */
//    @Override
//    public void close () {
//        nativeLib.zcertstore_destroy(self)
//        self = 0
//    }
//
    /**
     * Look up certificate by public key, returns zcert_t object if found,
     * else returns NULL. The public key is provided in Z85 text format.
     */
    fun lookup(publicKey: String): Zcert {
        return Zcert (nativeLib.zcertstore_lookup(self, publicKey))
    }

    /**
     * Insert certificate into certificate store in memory. Note that this
     * does not save the certificate to disk. To do that, use zcert_save()
     * directly on the certificate. Takes ownership of zcert_t object.
     */
    fun insert(certP: Zcert): Unit {
        nativeLib.zcertstore_insert(self, certP.self)
    }

    /**
     * Empty certificate hashtable. This wrapper exists to be friendly to bindings,
     * which don't usually have access to struct internals.
     */
    fun empty(): Unit {
        nativeLib.zcertstore_empty(self)
    }

    /**
     * Print list of certificates in store to logging facility
     */
    fun print(): Unit {
        nativeLib.zcertstore_print(self)
    }

    /**
     * Return a list of all the certificates in the store.
     * The caller takes ownership of the zlistx_t object and is responsible
     * for destroying it.  The caller does not take ownership of the zcert_t
     * objects.
     */
    fun certs(): Zlistx {
        return Zlistx (nativeLib.zcertstore_certs(self))
    }

    /**
     * Return the state stored in certstore
     */
    fun state(): Pointer {
        return nativeLib.zcertstore_state(self)
    }

}
