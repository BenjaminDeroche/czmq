/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Ztimerset {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun ztimerset_new(): Pointer
        fun destroy(self: Pointer)
        fun ztimerset_cancel(self: Pointer, timerId: Int): Int
        fun ztimerset_set_interval(self: Pointer, timerId: Int, interval: Pointer): Int
        fun ztimerset_reset(self: Pointer, timerId: Int): Int
        fun ztimerset_timeout(self: Pointer): Int
        fun ztimerset_execute(self: Pointer): Int
        fun ztimerset_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.ztimerset_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create new timer set.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.ztimerset_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy a timer set
     */
//    @Override
//    public void close () {
//        nativeLib.ztimerset_destroy(self)
//        self = 0
//    }
//
    /**
     * Cancel a timer. Returns 0 if OK, -1 on failure.
     */
    fun cancel(timerId: Int): Int {
        return nativeLib.ztimerset_cancel(self, timerId)
    }

    /**
     * Set timer interval. Returns 0 if OK, -1 on failure.
     * This method is slow, canceling the timer and adding a new one yield better performance.
     */
    fun setInterval(timerId: Int, interval: Pointer): Int {
        return nativeLib.ztimerset_set_interval(self, timerId, interval)
    }

    /**
     * Reset timer to start interval counting from current time. Returns 0 if OK, -1 on failure.
     * This method is slow, canceling the timer and adding a new one yield better performance.
     */
    fun reset(timerId: Int): Int {
        return nativeLib.ztimerset_reset(self, timerId)
    }

    /**
     * Return the time until the next interval.
     * Should be used as timeout parameter for the zpoller wait method.
     * The timeout is in msec.
     */
    fun timeout(): Int {
        return nativeLib.ztimerset_timeout(self)
    }

    /**
     * Invoke callback function of all timers which their interval has elapsed.
     * Should be call after zpoller wait method.
     * Returns 0 if OK, -1 on failure.
     */
    fun execute(): Int {
        return nativeLib.ztimerset_execute(self)
    }

}
