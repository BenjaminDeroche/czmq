/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zframe {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zframe_new(data: ByteArray, size: Pointer): Pointer
        fun zframe_new_empty(): Pointer
        fun zframe_from(string: String): Pointer
        fun zframe_recv(source: Pointer): Pointer
        fun destroy(self: Pointer)
        fun zframe_send(self: Pointer, dest: Pointer, flags: Int): Pointer
        fun zframe_size(self: Pointer): Pointer
        fun zframe_data(self: Pointer): ByteArray
        fun zframe_meta(self: Pointer, property: String): String
        fun zframe_dup(self: Pointer): Pointer
        fun zframe_strhex(self: Pointer): String
        fun zframe_strdup(self: Pointer): String
        fun zframe_streq(self: Pointer, string: String): Boolean
        fun zframe_more(self: Pointer): Int
        fun zframe_set_more(self: Pointer, more: Int): Unit
        fun zframe_routing_id(self: Pointer): Int
        fun zframe_set_routing_id(self: Pointer, routingId: Int): Unit
        fun zframe_group(self: Pointer): String
        fun zframe_set_group(self: Pointer, group: String): Int
        fun zframe_eq(self: Pointer, other: Pointer): Boolean
        fun zframe_reset(self: Pointer, data: ByteArray, size: Pointer): Unit
        fun zframe_print(self: Pointer, prefix: String): Unit
        fun zframe_print_n(self: Pointer, prefix: String, length: Pointer): Unit
        fun zframe_is(self: Pointer): Boolean
        fun zframe_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Probe the supplied object, and report if it looks like a zframe_t.
     */
    fun `is`(self: Pointer): Boolean {
        return nativeLib.zframe_is(self)
    }

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zframe_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new frame. If size is not null, allocates the frame data
     * to the specified size. If additionally, data is not null, copies
     * size octets from the specified data into the frame body.
     */
    constructor(data: ByteArray, size: Pointer) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zframe_new(data, size)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Create an empty (zero-sized) frame
     */
//    public static Zframe newEmpty () {
//        return new Zframe (nativeLib.zframe_new_empty ())
//    }
//
    /**
     * Create a frame with a specified string content.
     */
//    public static Zframe from (string: String) {
//        return new Zframe (nativeLib.zframe_from (string))
//    }
//
    /**
     * Receive frame from socket, returns zframe_t object or NULL if the recv
     * was interrupted. Does a blocking recv, if you want to not block then use
     * zpoller or zloop.
     */
//    public static Zframe recv (source: Pointer) {
//        return new Zframe (nativeLib.zframe_recv (source))
//    }
//
    /**
     * Destroy a frame
     */
//    @Override
//    public void close () {
//        nativeLib.zframe_destroy(self)
//        self = 0
//    }
//
    /**
     * Send a frame to a socket, destroy frame after sending.
     * Return -1 on error, 0 on success.
     */
    fun send(dest: Pointer, flags: Int): Unit {
        self = nativeLib.zframe_send(self, dest, flags)
    }

    /**
     * Return number of bytes in frame data
     */
    fun size(): Pointer {
        return nativeLib.zframe_size(self)
    }

    /**
     * Return address of frame data
     */
    fun data(): ByteArray {
        return nativeLib.zframe_data(self)
    }

    /**
     * Return meta data property for frame
     * The caller shall not modify or free the returned value, which shall be
     * owned by the message.
     */
    fun meta(property: String): String {
        return nativeLib.zframe_meta(self, property)
    }

    /**
     * Create a new frame that duplicates an existing frame. If frame is null,
     * or memory was exhausted, returns null.
     */
    fun dup(): Zframe {
        return Zframe (nativeLib.zframe_dup(self))
    }

    /**
     * Return frame data encoded as printable hex string, useful for 0MQ UUIDs.
     * Caller must free string when finished with it.
     */
    fun strhex(): String {
        return nativeLib.zframe_strhex(self)
    }

    /**
     * Return frame data copied into freshly allocated string
     * Caller must free string when finished with it.
     */
    fun strdup(): String {
        return nativeLib.zframe_strdup(self)
    }

    /**
     * Return TRUE if frame body is equal to string, excluding terminator
     */
    fun streq(string: String): Boolean {
        return nativeLib.zframe_streq(self, string)
    }

    /**
     * Return frame MORE indicator (1 or 0), set when reading frame from socket
     * or by the zframe_set_more() method
     */
    fun more(): Int {
        return nativeLib.zframe_more(self)
    }

    /**
     * Set frame MORE indicator (1 or 0). Note this is NOT used when sending
     * frame to socket, you have to specify flag explicitly.
     */
    fun setMore(more: Int): Unit {
        nativeLib.zframe_set_more(self, more)
    }

    /**
     * Return frame routing ID, if the frame came from a ZMQ_SERVER socket.
     * Else returns zero.
     */
    fun routingId(): Int {
        return nativeLib.zframe_routing_id(self)
    }

    /**
     * Set routing ID on frame. This is used if/when the frame is sent to a
     * ZMQ_SERVER socket.
     */
    fun setRoutingId(routingId: Int): Unit {
        nativeLib.zframe_set_routing_id(self, routingId)
    }

    /**
     * Return frame group of radio-dish pattern.
     */
    fun group(): String {
        return nativeLib.zframe_group(self)
    }

    /**
     * Set group on frame. This is used if/when the frame is sent to a
     * ZMQ_RADIO socket.
     * Return -1 on error, 0 on success.
     */
    fun setGroup(group: String): Int {
        return nativeLib.zframe_set_group(self, group)
    }

    /**
     * Return TRUE if two frames have identical size and data
     * If either frame is NULL, equality is always false.
     */
    fun eq(other: Zframe): Boolean {
        return nativeLib.zframe_eq(self, other.self)
    }

    /**
     * Set new contents for frame
     */
    fun reset(data: ByteArray, size: Pointer): Unit {
        nativeLib.zframe_reset(self, data, size)
    }

    /**
     * Send message to zsys log sink (may be stdout, or system facility as
     * configured by zsys_set_logstream). Prefix shows before frame, if not null.
     * Long messages are truncated.
     */
    fun print(prefix: String): Unit {
        nativeLib.zframe_print(self, prefix)
    }

    /**
     * Send message to zsys log sink (may be stdout, or system facility as
     * configured by zsys_set_logstream). Prefix shows before frame, if not null.
     * Message length is specified; no truncation unless length is zero.
     * Backwards compatible with zframe_print when length is zero.
     */
    fun printN(prefix: String, length: Pointer): Unit {
        nativeLib.zframe_print_n(self, prefix, length)
    }

}
