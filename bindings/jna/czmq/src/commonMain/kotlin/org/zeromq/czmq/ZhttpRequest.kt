/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class ZhttpRequest {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zhttp_request_new(): Pointer
        fun destroy(self: Pointer)
        fun zhttp_request_recv(self: Pointer, sock: Pointer): Pointer
        fun zhttp_request_send(self: Pointer, client: Pointer, timeout: Int, arg: Pointer, arg2: Pointer): Int
        fun zhttp_request_method(self: Pointer): String
        fun zhttp_request_set_method(self: Pointer, method: String): Unit
        fun zhttp_request_url(self: Pointer): String
        fun zhttp_request_set_url(self: Pointer, url: String): Unit
        fun zhttp_request_content_type(self: Pointer): String
        fun zhttp_request_set_content_type(self: Pointer, contentType: String): Unit
        fun zhttp_request_content_length(self: Pointer): Pointer
        fun zhttp_request_headers(self: Pointer): Pointer
        fun zhttp_request_content(self: Pointer): String
        fun zhttp_request_get_content(self: Pointer): String
        fun zhttp_request_set_content_const(self: Pointer, content: String): Unit
        fun zhttp_request_reset_content(self: Pointer): Unit
        fun zhttp_request_set_username(self: Pointer, username: String): Unit
        fun zhttp_request_set_password(self: Pointer, password: String): Unit
        fun zhttp_request_match(self: Pointer, method: String, path: Array<out String>): Boolean
        fun zhttp_request_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zhttp_request_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new http request.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zhttp_request_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy an http request.
     */
//    @Override
//    public void close () {
//        nativeLib.zhttp_request_destroy(self)
//        self = 0
//    }
//
    /**
     * Receive a new request from zhttp_server.
     * Return the underlying connection if successful, to be used when calling zhttp_response_send.
     */
    fun recv(sock: Zsock): Pointer {
        return nativeLib.zhttp_request_recv(self, sock.self)
    }

    /**
     * Send a request to zhttp_client.
     * Url and the request path will be concatenated.
     * This behavior is useful for url rewrite and reverse proxy.
     *
     * Send also allow two user provided arguments which will be returned with the response.
     * The reason for two, is to be able to pass around the server connection when forwarding requests or both a callback function and an arg.
     */
    fun send(client: ZhttpClient, timeout: Int, arg: Pointer, arg2: Pointer): Int {
        return nativeLib.zhttp_request_send(self, client.self, timeout, arg, arg2)
    }

    /**
     * Get the request method
     */
    fun method(): String {
        return nativeLib.zhttp_request_method(self)
    }

    /**
     * Set the request method
     */
    fun setMethod(method: String): Unit {
        nativeLib.zhttp_request_set_method(self, method)
    }

    /**
     * Get the request url.
     * When receiving a request from http server this is only the path part of the url.
     */
    fun url(): String {
        return nativeLib.zhttp_request_url(self)
    }

    /**
     * Set the request url
     * When sending a request to http client this should be full url.
     */
    fun setUrl(url: String): Unit {
        nativeLib.zhttp_request_set_url(self, url)
    }

    /**
     * Get the request content type
     */
    fun contentType(): String {
        return nativeLib.zhttp_request_content_type(self)
    }

    /**
     * Set the request content type
     */
    fun setContentType(contentType: String): Unit {
        nativeLib.zhttp_request_set_content_type(self, contentType)
    }

    /**
     * Get the content length of the request
     */
    fun contentLength(): Pointer {
        return nativeLib.zhttp_request_content_length(self)
    }

    /**
     * Get the headers of the request
     */
    fun headers(): Zhash {
        return Zhash (nativeLib.zhttp_request_headers(self))
    }

    /**
     * Get the content of the request.
     */
    fun content(): String {
        return nativeLib.zhttp_request_content(self)
    }

    /**
     * Get the content of the request.
     */
    fun getContent(): String {
        return nativeLib.zhttp_request_get_content(self)
    }

    /**
     * Set the content of the request..
     * The content is assumed to be constant-memory and will therefore not be copied or deallocated in any way.
     */
    fun setContentConst(content: String): Unit {
        nativeLib.zhttp_request_set_content_const(self, content)
    }

    /**
     * Set the content to NULL
     */
    fun resetContent(): Unit {
        nativeLib.zhttp_request_reset_content(self)
    }

    /**
     * Set the request username
     */
    fun setUsername(username: String): Unit {
        nativeLib.zhttp_request_set_username(self, username)
    }

    /**
     * Set the request password
     */
    fun setPassword(password: String): Unit {
        nativeLib.zhttp_request_set_password(self, password)
    }

    /**
     * Match the path of the request.
     * Support wildcards with '%s' symbol inside the match string.
     * Matching wildcards until the next '/', '?' or '\0'.
     * On successful match the variadic arguments will be filled with the matching strings.
     * On successful match the method is modifying the url field and break it into substrings.
     * If you need to use the url, do it before matching or take a copy.
     *
     * User must not free the variadic arguments as they are part of the url.
     *
     * To use the percent symbol, just double it, e.g "%%something".
     *
     * Example:
     * if (zhttp_request_match (request, "POST", "/send/%s/%s", &name, &id))
     */
    fun match(method: String, vararg path: String): Boolean {
        return nativeLib.zhttp_request_match(self, method, path)
    }

}
