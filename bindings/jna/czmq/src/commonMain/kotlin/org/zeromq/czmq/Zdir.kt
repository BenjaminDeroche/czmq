/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zdir {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zdir_new(path: String, parent: String): Pointer
        fun destroy(self: Pointer)
        fun zdir_path(self: Pointer): String
        fun zdir_modified(self: Pointer): Pointer
        fun zdir_cursize(self: Pointer): Pointer
        fun zdir_count(self: Pointer): Pointer
        fun zdir_list(self: Pointer): Pointer
        fun zdir_list_paths(self: Pointer): Pointer
        fun zdir_remove(self: Pointer, force: Boolean): Unit
        fun zdir_diff(older: Pointer, newer: Pointer, alias: String): Pointer
        fun zdir_resync(self: Pointer, alias: String): Pointer
        fun zdir_cache(self: Pointer): Pointer
        fun zdir_print(self: Pointer, indent: Int): Unit
        fun zdir_watch(pipe: Pointer, unused: Pointer): Unit
        fun zdir_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Calculate differences between two versions of a directory tree.
     * Returns a list of zdir_patch_t patches. Either older or newer may
     * be null, indicating the directory is empty/absent. If alias is set,
     * generates virtual filename (minus path, plus alias).
     */
    fun diff(older: Zdir, newer: Zdir, alias: String): Zlist {
        return Zlist (nativeLib.zdir_diff(older.self, newer.self, alias))
    }

    /**
     * Create a new zdir_watch actor instance:
     *
     *     zactor_t *watch = zactor_new (zdir_watch, NULL);
     *
     * Destroy zdir_watch instance:
     *
     *     zactor_destroy (&watch);
     *
     * Enable verbose logging of commands and activity:
     *
     *     zstr_send (watch, "VERBOSE");
     *
     * Subscribe to changes to a directory path:
     *
     *     zsock_send (watch, "ss", "SUBSCRIBE", "directory_path");
     *
     * Unsubscribe from changes to a directory path:
     *
     *     zsock_send (watch, "ss", "UNSUBSCRIBE", "directory_path");
     *
     * Receive directory changes:
     *     zsock_recv (watch, "sp", &path, &patches);
     *
     *     // Delete the received data.
     *     free (path);
     *     zlist_destroy (&patches);
     */
    fun watch(pipe: Zsock, unused: Pointer): Unit {
        nativeLib.zdir_watch(pipe.self, unused)
    }

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zdir_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new directory item that loads in the full tree of the specified
     * path, optionally located under some parent path. If parent is "-", then
     * loads only the top-level directory, and does not use parent as a path.
     */
    constructor(path: String, parent: String) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zdir_new(path, parent)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destroy a directory tree and all children it contains.
     */
//    @Override
//    public void close () {
//        nativeLib.zdir_destroy(self)
//        self = 0
//    }
//
    /**
     * Return directory path
     */
    fun path(): String {
        return nativeLib.zdir_path(self)
    }

    /**
     * Return last modification time for directory.
     */
    fun modified(): Pointer {
        return nativeLib.zdir_modified(self)
    }

    /**
     * Return total hierarchy size, in bytes of data contained in all files
     * in the directory tree.
     */
    fun cursize(): Pointer {
        return nativeLib.zdir_cursize(self)
    }

    /**
     * Return directory count
     */
    fun count(): Pointer {
        return nativeLib.zdir_count(self)
    }

    /**
     * Returns a sorted list of zfile objects; Each entry in the list is a pointer
     * to a zfile_t item already allocated in the zdir tree. Do not destroy the
     * original zdir tree until you are done with this list.
     */
    fun list(): Zlist {
        return Zlist (nativeLib.zdir_list(self))
    }

    /**
     * Returns a sorted list of char*; Each entry in the list is a path of a file
     * or directory contained in self.
     */
    fun listPaths(): Zlist {
        return Zlist (nativeLib.zdir_list_paths(self))
    }

    /**
     * Remove directory, optionally including all files that it contains, at
     * all levels. If force is false, will only remove the directory if empty.
     * If force is true, will remove all files and all subdirectories.
     */
    fun remove(force: Boolean): Unit {
        nativeLib.zdir_remove(self, force)
    }

    /**
     * Return full contents of directory as a zdir_patch list.
     */
    fun resync(alias: String): Zlist {
        return Zlist (nativeLib.zdir_resync(self, alias))
    }

    /**
     * Load directory cache; returns a hash table containing the SHA-1 digests
     * of every file in the tree. The cache is saved between runs in .cache.
     */
    fun cache(): Zhash {
        return Zhash (nativeLib.zdir_cache(self))
    }

    /**
     * Print contents of directory to stdout
     */
    fun print(indent: Int): Unit {
        nativeLib.zdir_print(self, indent)
    }

}
