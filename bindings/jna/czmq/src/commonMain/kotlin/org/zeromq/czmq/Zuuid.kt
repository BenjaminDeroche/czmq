/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer

class Zuuid {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("uuid", true)
//        libraries.put("systemd", true)
//        libraries.put("lz4", true)
//        libraries.put("curl", true)
//        libraries.put("nss", true)
//        libraries.put("microhttpd", true)
//        libraries.put("czmq", false)
//        libraries.put("czmqjni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zuuid_new(): Pointer
        fun zuuid_new_from(source: ByteArray): Pointer
        fun destroy(self: Pointer)
        fun zuuid_set(self: Pointer, source: ByteArray): Unit
        fun zuuid_set_str(self: Pointer, source: String): Int
        fun zuuid_data(self: Pointer): ByteArray
        fun zuuid_size(self: Pointer): Pointer
        fun zuuid_str(self: Pointer): String
        fun zuuid_str_canonical(self: Pointer): String
        fun zuuid_export(self: Pointer, target: ByteArray): Unit
        fun zuuid_eq(self: Pointer, compare: ByteArray): Boolean
        fun zuuid_neq(self: Pointer, compare: ByteArray): Boolean
        fun zuuid_dup(self: Pointer): Pointer
        fun zuuid_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("czmq", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zuuid_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Create a new UUID object.
     */
    constructor() {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zuuid_new()
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Create UUID object from supplied ZUUID_LEN-octet value.
     */
//    public static Zuuid newFrom (source: ByteArray) {
//        return new Zuuid (nativeLib.zuuid_new_from (source))
//    }
//
    /**
     * Destroy a specified UUID object.
     */
//    @Override
//    public void close () {
//        nativeLib.zuuid_destroy(self)
//        self = 0
//    }
//
    /**
     * Set UUID to new supplied ZUUID_LEN-octet value.
     */
    fun set(source: ByteArray): Unit {
        nativeLib.zuuid_set(self, source)
    }

    /**
     * Set UUID to new supplied string value skipping '-' and '{' '}'
     * optional delimiters. Return 0 if OK, else returns -1.
     */
    fun setStr(source: String): Int {
        return nativeLib.zuuid_set_str(self, source)
    }

    /**
     * Return UUID binary data.
     */
    fun data(): ByteArray {
        return nativeLib.zuuid_data(self)
    }

    /**
     * Return UUID binary size
     */
    fun size(): Pointer {
        return nativeLib.zuuid_size(self)
    }

    /**
     * Returns UUID as string
     */
    fun str(): String {
        return nativeLib.zuuid_str(self)
    }

    /**
     * Return UUID in the canonical string format: 8-4-4-4-12, in lower
     * case. Caller does not modify or free returned value. See
     * http://en.wikipedia.org/wiki/Universally_unique_identifier
     */
    fun strCanonical(): String {
        return nativeLib.zuuid_str_canonical(self)
    }

    /**
     * Store UUID blob in target array
     */
    fun export(target: ByteArray): Unit {
        nativeLib.zuuid_export(self, target)
    }

    /**
     * Check if UUID is same as supplied value
     */
    fun eq(compare: ByteArray): Boolean {
        return nativeLib.zuuid_eq(self, compare)
    }

    /**
     * Check if UUID is different from supplied value
     */
    fun neq(compare: ByteArray): Boolean {
        return nativeLib.zuuid_neq(self, compare)
    }

    /**
     * Make copy of UUID object; if uuid is null, or memory was exhausted,
     * returns null.
     */
    fun dup(): Zuuid {
        return Zuuid (nativeLib.zuuid_dup(self))
    }

}
